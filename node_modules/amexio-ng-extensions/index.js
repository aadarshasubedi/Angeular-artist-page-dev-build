import { ChangeDetectorRef, Component, ContentChild, ContentChildren, EventEmitter, HostBinding, HostListener, Injectable, Input, NgModule, Output, forwardRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { Headers, Http, HttpModule, RequestOptions } from '@angular/http';

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author -  Dattaram Gawas
 *
 */
var ButtonComponent = (function () {
    function ButtonComponent() {
        this.onClick = new EventEmitter();
        this.elementId = 'button-' + new Date().getTime() + Math.random();
    }
    /**
     * @return {?}
     */
    ButtonComponent.prototype.ngOnInit = function () {
        this.btnStyleClass = 'btn ';
        this.btnSizeStyleClass = '';
        if (this.type.toLocaleLowerCase() === 'warning') {
            this.btnStyleClass = this.btnStyleClass + 'btn-warning';
        }
        else if (this.type.toLocaleLowerCase() === 'primary') {
            this.btnStyleClass = this.btnStyleClass + 'btn-primary';
        }
        else if (this.type.toLocaleLowerCase() === 'success') {
            this.btnStyleClass = this.btnStyleClass + 'btn-success';
        }
        else if (this.type.toLocaleLowerCase() === 'danger') {
            this.btnStyleClass = this.btnStyleClass + 'btn-danger';
        }
        else if (this.type.toLocaleLowerCase() === 'link') {
            this.btnStyleClass = this.btnStyleClass + 'btn-link';
        }
        else {
            this.btnStyleClass = this.btnStyleClass + 'btn-secondary';
        }
        this.iconStyleClass = 'fa fa-' + this.icon;
        if (this.tooltipMessage == null) {
            this.hasToolTip = false;
        }
        if (this.size != null) {
            if (this.size === 'large') {
                this.btnStyleClass = this.btnStyleClass.concat(' btn-lg');
            }
            else if (this.size === 'small') {
                this.btnStyleClass = this.btnStyleClass.concat(' btn-sm');
            }
        }
        if (this.block) {
            this.btnStyleClass = this.btnStyleClass.concat(' btn-block');
        }
        if (this.popoverPlacement == null) {
            this.popoverPlacement = 'bottom';
        }
    };
    /**
     * @param {?} change
     * @return {?}
     */
    ButtonComponent.prototype.ngOnChanges = function (change) {
        /*console.log(change.isLoading);
          if(change.isLoading){
            this.disabled = true;
          }*/ // TODO : Fix
    };
    /**
     * @return {?}
     */
    ButtonComponent.prototype.ngAfterViewInit = function () {
        // $('[data-toggle="popover"]').popover();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ButtonComponent.prototype.btnClick = function (event) {
        this.onClick.emit(event);
        if (this.onClickRoute != null) {
            // this.router.navigate([this.onClickRoute]);
        }
    };
    return ButtonComponent;
}());
ButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-btn',
                template: "\n      <div>\n          <button type=\"button\" (click)=\"btnClick($event)\"\n                  [class]=\"btnStyleClass\"\n                  [attr.fieldName] = \"fieldName\"\n                  [attr.disabled] = \"disabled ? true: null\"\n                  data-toggle=\"tooltip\" [attr.data-placement]=\"popoverPlacement\" [attr.title]=\"tooltipMessage\"\n          >\n              <ng-container *ngIf=\"isLoading\">\n                <i class=\"fa fa-refresh fa-spin \" aria-hidden=\"true\"></i>&nbsp;\n              </ng-container>\n              {{label}}\n              <ng-container *ngIf=\"icon!=null\">\n                <i [class]=\"iconStyleClass\" aria-hidden=\"true\"></i>\n                \n              </ng-container>\n          </button>\n      </div>\n\n  ",
                styles: ["\n  .glyphicon-refresh-animate {\n    -animation: spin .7s infinite linear;\n    -webkit-animation: spin2 .7s infinite linear;\n}\n\n@-webkit-keyframes spin2 {\n    from { -webkit-transform: rotate(0deg);}\n    to { -webkit-transform: rotate(360deg);}\n}\n\n@keyframes spin {\n    from { transform: scale(1) rotate(0deg);}\n    to { transform: scale(1) rotate(360deg);}\n}"
                ]
            },] },
];
/**
 * @nocollapse
 */
ButtonComponent.ctorParameters = function () { return []; };
ButtonComponent.propDecorators = {
    'label': [{ type: Input },],
    'icon': [{ type: Input },],
    'type': [{ type: Input },],
    'onClickRoute': [{ type: Input },],
    'tooltipMessage': [{ type: Input },],
    'disabled': [{ type: Input },],
    'isLoading': [{ type: Input },],
    'size': [{ type: Input },],
    'block': [{ type: Input },],
    'fieldName': [{ type: Input },],
    'popoverPlacement': [{ type: Input },],
    'onClick': [{ type: Output },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var CommonHttpService = (function () {
    /**
     * @param {?} http
     */
    function CommonHttpService(http) {
        this.http = http;
        this.filteredObject = [];
        if (Messenger != null) {
            Messenger.options = {
                extraClasses: 'messenger-fixed messenger-on-top messenger-on-right',
                theme: 'air'
            };
        }
        else {
            console.warn('Please include Messenger js/css in your assets from http://github.hubspot.com/messenger/');
        }
    }
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @return {?}
     */
    CommonHttpService.prototype.fetchData = function (serviceUrl, methodType) {
        var /** @type {?} */ requestJson = {};
        var /** @type {?} */ headers = new Headers({ 'Content-Type': 'application/json;charset=UTF-8' });
        var /** @type {?} */ options = new RequestOptions({ headers: headers, method: methodType });
        if (methodType == "post") {
            return this.http.post(serviceUrl, requestJson, options);
        }
        else if (methodType == "get") {
            return this.http.get(serviceUrl, options);
        }
    };
    /**
     * Sets the the form field to disabled mode.
     * @param {?} inputTexts Reference to Form Components
     * @param {?} fieldName Name of the Field
     * @param {?} disabled  Boolean, Set true | false to disable
     * @return {?}
     */
    CommonHttpService.prototype.setDisabled = function (inputTexts, fieldName, disabled) {
        var /** @type {?} */ components = inputTexts._results;
        for (var /** @type {?} */ iComponents = 0; iComponents < components.length; iComponents++) {
            var /** @type {?} */ inputText = components[iComponents];
            if (inputText.fieldName == fieldName) {
                inputText.disabled = disabled;
            }
        }
    };
    /**
     * @param {?} inputTexts
     * @return {?}
     */
    CommonHttpService.prototype.validate = function (inputTexts) {
        var /** @type {?} */ components = inputTexts;
        var /** @type {?} */ showMessage = false;
        var /** @type {?} */ errorCounter = 1;
        var /** @type {?} */ title = "<strong>Please validate following fields</strong><br><hr>";
        var /** @type {?} */ validateMsg = "<br>";
        for (var /** @type {?} */ iComponents = 0; iComponents < components.length; iComponents++) {
            var /** @type {?} */ inputText = components[iComponents];
            var /** @type {?} */ isValid = inputText.isValidInput();
            if (isValid) {
                validateMsg = validateMsg + ' ' + errorCounter + ') ' + inputText.fieldLabel + "<br/>";
                showMessage = true;
                errorCounter++;
            }
        }
        if (showMessage)
            Messenger().post({
                message: showMessage,
                type: 'error',
                showCloseButton: true
            });
        return showMessage;
    };
    /**
     * @param {?} inputTexts
     * @return {?}
     */
    CommonHttpService.prototype.validateAll = function (inputTexts) {
        var /** @type {?} */ showMessage = false;
        var /** @type {?} */ errorCounter = 1;
        var /** @type {?} */ title = "<strong>Please validate following fields</strong><hr>";
        var /** @type {?} */ validateMsg = "<br>";
        for (var /** @type {?} */ ic = 0; ic < inputTexts.length; ic++) {
            var /** @type {?} */ component = inputTexts[ic];
            var /** @type {?} */ isValid = component.isValidInput();
            if (isValid) {
                validateMsg = validateMsg + ' ' + errorCounter + ') ' + component.fieldLabel + "<br>";
                showMessage = true;
                errorCounter++;
            }
        }
        if (showMessage)
            Messenger().post({
                message: showMessage,
                type: 'error',
                showCloseButton: true
            });
        return showMessage;
    };
    /**
     * @param {?} title
     * @param {?} message
     * @param {?} timeout
     * @return {?}
     */
    CommonHttpService.prototype.toasterDanger = function (title, message, timeout) {
        if (timeout != null)
            timeout = '3';
        Messenger().post({
            message: message,
            type: 'error',
            showCloseButton: true,
            hideAfter: timeout
        });
    };
    /**
     * @param {?} title
     * @param {?} message
     * @param {?} timeout
     * @return {?}
     */
    CommonHttpService.prototype.toasterSuccess = function (title, message, timeout) {
        if (timeout != null)
            timeout = '3';
        Messenger().post({
            message: message,
            type: 'success',
            showCloseButton: true,
            hideAfter: timeout
        });
    };
    /**
     * @param {?} title
     * @param {?} message
     * @param {?} timeout
     * @return {?}
     */
    CommonHttpService.prototype.toasterInfo = function (title, message, timeout) {
        if (timeout != null)
            timeout = '3';
        Messenger().post({
            message: message,
            type: 'info',
            showCloseButton: true,
            hideAfter: timeout
        });
    };
    return CommonHttpService;
}());
CommonHttpService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CommonHttpService.ctorParameters = function () { return [
    { type: Http, },
]; };

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
/**
 * Base class Used to Inject into all Form Fields Components.
 */
var FormInputBase = (function () {
    function FormInputBase() {
        /* if (Messenger != null){
             Messenger.options = {
                 extraClasses: 'messenger-fixed messenger-on-top messenger-on-right',
                 theme: 'air'
             };
         }
         else{
           console.warn('Please Include Messenger JS Library from http://github.hubspot.com/messenger/docs/welcome/');
         }
 */
        this.hasLabel = true;
    }
    /**
     * @return {?}
     */
    FormInputBase.prototype.validate = function () {
        this.isValid = this.isValidInput();
    };
    /**
     * @return {?}
     */
    FormInputBase.prototype.isValidInput = function () {
        return null;
    };
    /**
     * @return {?}
     */
    FormInputBase.prototype.setValidClassNames = function () {
        this.divCss = 'form-group has-danger has-feedback has-feedback-custom';
        this.iconName = 'danger';
        this.iconClassName = 'fa fa-times';
    };
    /**
     * @return {?}
     */
    FormInputBase.prototype.setInvalidatedClassNames = function () {
        this.divCss = 'form-group has-success has-feedback has-feedback-custom';
        this.iconName = 'success';
        this.iconClassName = 'fa fa-check';
    };
    return FormInputBase;
}());
FormInputBase.propDecorators = {
    'fieldLabel': [{ type: Input },],
    'fieldName': [{ type: Input },],
    'minLength': [{ type: Input },],
    'minErrorMsg': [{ type: Input },],
    'maxLength': [{ type: Input },],
    'maxErrorMsg': [{ type: Input },],
    'allowBlank': [{ type: Input },],
    'errorMsg': [{ type: Input },],
    'placeholder': [{ type: Input },],
    'disabled': [{ type: Input },],
    'iconFeedBack': [{ type: Input },],
    'fontStyle': [{ type: Input },],
    'fontFamily': [{ type: Input },],
    'fontSize': [{ type: Input },],
    'fieldIcon': [{ type: Input },],
    'hasLabel': [{ type: Input },],
    'pattern': [{ type: Input },],
    'popoverPlacement': [{ type: Input },],
    'enablePopOver': [{ type: Input },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var noop = function () {
};
var CUSTOM_TEXT_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return TextInputComponent; }),
    multi: true
};
var BASE_IMPL_TEXT_INPUT = {
    provide: FormInputBase,
    useExisting: forwardRef(function () { return TextInputComponent; })
};
var TextInputComponent = (function (_super) {
    __extends(TextInputComponent, _super);
    function TextInputComponent() {
        var _this = _super.call(this) || this;
        _this.innerValue = '';
        _this.onTouchedCallback = noop;
        _this.onChangeCallback = noop;
        _this.elementId = 'input-text-' + new Date().getTime() + Math.random();
        _this.spanId = 'span-msg-' + Math.random();
        if (_this.iconFeedBack) {
            _this.divCss = 'form-group has-feedback';
        }
        else {
            _this.divCss = 'form-group has-feedback has-feedback-custom';
        }
        return _this;
    }
    /**
     * @return {?}
     */
    TextInputComponent.prototype.ngOnInit = function () {
        if (this.errorMsg) {
            this.helpInfoMsg = this.errorMsg + '<br/>';
        }
        if (this.minErrorMsg) {
            this.helpInfoMsg = this.helpInfoMsg + 'Min Length: ' + this.minErrorMsg + '<br/>';
        }
        if (this.maxErrorMsg) {
            this.helpInfoMsg = this.helpInfoMsg + 'Max Length: ' + this.maxErrorMsg;
        }
        if (!this.iconFeedBack) {
            this.fieldglyphIcon = 'form-control-feedback glyphicon glyphicon-' + this.fieldIcon;
        }
        if (this.pattern != null) {
            this.regEx = new RegExp(this.pattern);
        }
        if (this.popoverPlacement == null) {
            this.popoverPlacement = 'bottom';
        }
        if (this.enablePopOver) {
            this.popoverField = 'popover';
        }
    };
    /**
     * @return {?}
     */
    TextInputComponent.prototype.ngAfterViewInit = function () {
        $('[data-toggle="popover"]').popover();
    };
    Object.defineProperty(TextInputComponent.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this.innerValue;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    
    /**
     * @return {?}
     */
    TextInputComponent.prototype.onBlur = function () {
        this.onTouchedCallback();
        this.validate();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TextInputComponent.prototype.writeValue = function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TextInputComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TextInputComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @return {?}
     */
    TextInputComponent.prototype.isValidInput = function () {
        var /** @type {?} */ hasError = false;
        var /** @type {?} */ valueLength = 0;
        if (this.value != null) {
            valueLength = this.value.length;
        }
        if ((this.allowBlank && (!this.value || valueLength == 0))) {
            hasError = true;
        }
        else if (this.pattern != null && !this.regEx.test(this.value)) {
            hasError = true;
        }
        else if (this.minLength > valueLength) {
            hasError = true;
        }
        else if (this.maxLength < valueLength) {
            hasError = true;
        }
        if (hasError) {
            this.setValidClassNames();
        }
        else {
            this.setInvalidatedClassNames();
        }
        return hasError;
    };
    return TextInputComponent;
}(FormInputBase));
TextInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-text-input',
                template: "\n    <div [attr.class]=\"divCss\">\n      \n      <ng-container *ngIf=\"hasLabel\">\n        <label [attr.for]=\"elementId\"\n               [style.font-style]=\"fontStyle\"\n               [style.font-family]=\"fontFamily\"\n               [style.font-size]=\"fontSize\"\n               class=\"control-label\">\n          {{fieldLabel}}\n        </label>\n      </ng-container>\n\n      <input type=\"text\"\n             (blur)=\"onBlur()\"\n             [(ngModel)]=\"value\"\n             [attr.fieldName] = \"fieldName\"\n             [attr.id]=\"elementId\"\n             [attr.placeholder]=\"placeholder\"\n             [attr.maxLength]=\"maxLength\"\n             [attr.minLength]=\"minLength\"\n             [attr.disabled] = \"disabled ? true: null\"\n             [required]=\"allowBlank ? true: null\"\n             [attr.data-error]=\"errorMsg\"\n             [attr.aria-describedby]=\"spanId\"\n             autocomplete=\"off\"\n             class=\"form-control\"\n             [attr.data-toggle]=\"popoverField\" title=\"Info\" [attr.data-placement]=\"popoverPlacement\"  data-trigger=\"focus\"  data-html=\"true\"  [attr.data-content]=\"helpInfoMsg\">\n\n      <ng-container *ngIf=\"iconFeedBack\">\n        <span class=\"form-control-feedback-custom\">\n          <i [attr.class]=\"iconClassName\"></i>\n        </span>\n      </ng-container>\n\n      <ng-container *ngIf=\"!iconFeedBack\">\n        <i [class]=\"fieldglyphIcon\"></i>\n      </ng-container>\n      \n    </div>\n",
                providers: [CUSTOM_TEXT_INPUT_CONTROL_VALUE_ACCESSOR, BASE_IMPL_TEXT_INPUT],
                styles: ["\n        .has-feedback-custom {\n            position: relative;\n        }\n        .has-feedback-custom .form-control {\n            padding-right: 47.5px;\n        }\n\n        .form-control-feedback-custom {\n            position: absolute;\n            top: 0;\n            right: 0;\n            z-index: 2;\n            display: block;\n            width: 38px;\n            height: 38px;\n            line-height: 38px;\n            text-align: center;\n            pointer-events: none;\n        }\n\n        .has-feedback-custom label ~ .form-control-feedback-custom {\n            top: 32px;\n        }\n        .has-feedback-custom label.sr-only ~ .form-control-feedback-custom {\n            top: 0;\n        }\n\n        .searchIconPos{\n            position: absolute;\n            right: 5px;\n            top: 15px;\n            bottom: 0;\n            height: 14px;\n            margin: auto;\n            font-size: 14px;\n            cursor: pointer;\n            color: #ccc;\n        }\n        .showIcon{\n            visibility: visible;\n        }\n        .hideIcon{\n            visibility: hidden;\n        }\n        .scrollable-options {\n            height: auto;\n            max-height: 200px;\n            overflow-x: hidden;\n        }\n    "]
            },] },
];
/**
 * @nocollapse
 */
TextInputComponent.ctorParameters = function () { return []; };

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var DropdownItemComponent = (function () {
    function DropdownItemComponent() {
        this.onItemClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    DropdownItemComponent.prototype.ngOnInit = function () {
    };
    return DropdownItemComponent;
}());
DropdownItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-btn-dropdown-item',
                template: ""
            },] },
];
/**
 * @nocollapse
 */
DropdownItemComponent.ctorParameters = function () { return []; };
DropdownItemComponent.propDecorators = {
    'label': [{ type: Input },],
    'disabled': [{ type: Input },],
    'icon': [{ type: Input },],
    'onClickRoute': [{ type: Input },],
    'onItemClick': [{ type: Output },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var ButtonDropdownComponent = (function () {
    function ButtonDropdownComponent() {
        this.elementId = 'button-dropdown' + new Date().getTime() + Math.random();
    }
    /**
     * @return {?}
     */
    ButtonDropdownComponent.prototype.ngOnInit = function () {
        this.btnStyleClass = 'btn ';
        this.btnDropdownStyle = 'dropdown-toggle dropdown-toggle-split';
        if (this.type !== '' || this.type != null) {
            if (this.type === 'warning') {
                this.btnStyleClass = this.btnStyleClass + 'btn-warning';
            }
            else if (this.type === 'primary') {
                this.btnStyleClass = this.btnStyleClass + 'btn-primary';
            }
            else if (this.type === 'success') {
                this.btnStyleClass = this.btnStyleClass + 'btn-success';
            }
            else if (this.type === 'danger') {
                this.btnStyleClass = this.btnStyleClass + 'btn-danger';
            }
        }
        else {
            this.btnStyleClass = this.btnStyleClass + 'btn-secondary';
        }
        if (this.size != null) {
            this.btnGroupStyleClass = 'btn-group ';
            if (this.size != null) {
                if (this.size === 'large') {
                    this.btnGroupStyleClass = this.btnGroupStyleClass.concat(' btn-group-lg');
                }
                else if (this.size === 'small') {
                    this.btnGroupStyleClass = this.btnGroupStyleClass.concat(' btn-group-sm');
                }
            }
        }
        this.btnDropdownStyle = this.btnStyleClass + ' ' + this.btnDropdownStyle;
    };
    /**
     * @return {?}
     */
    ButtonDropdownComponent.prototype.ngAfterContentInit = function () {
        this.createConfig();
    };
    /**
     * @return {?}
     */
    ButtonDropdownComponent.prototype.createConfig = function () {
        this.dropdownItemData = [];
        this.createDropdownItemConfig();
    };
    /**
     * @return {?}
     */
    ButtonDropdownComponent.prototype.createDropdownItemConfig = function () {
        var /** @type {?} */ itemRefArray = [];
        itemRefArray = this.dropdownItemRef.toArray();
        for (var /** @type {?} */ cr = 0; cr < itemRefArray.length; cr++) {
            var /** @type {?} */ itemConfig = itemRefArray[cr];
            var /** @type {?} */ data = { label: itemConfig.label, disabled: itemConfig.disabled, onItemClick: itemConfig.onItemClick, iconStyleClass: itemConfig.iconStyleClass, icon: itemConfig.icon, onClickRoute: itemConfig.onClickRoute };
            data.iconStyleClass = 'fa fa-' + data.icon + ' pull-right';
            this.dropdownItemData.push(data);
        }
    };
    /**
     * @param {?} event
     * @param {?} itemData
     * @return {?}
     */
    ButtonDropdownComponent.prototype.itemClick = function (event, itemData) {
        itemData.onItemClick.emit(event);
        if (itemData.onClickRoute != null) {
            // this.router.navigate([itemData.onClickRoute]);
        }
    };
    return ButtonDropdownComponent;
}());
ButtonDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-btn-dropdown',
                template: "\n      <div [class]=\"btnGroupStyleClass\" [attr.id]=\"elementId\">\n          <button type=\"button\" [class]=\"btnDropdownStyle\"  data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n              {{label}}\n          </button>\n          <ul class=\"dropdown-menu\">\n              <ng-container *ngFor=\"let itemData of dropdownItemData\">\n                  <a class=\"dropdown-item\" [ngClass]=\"{'disabled':itemData.disabled}\" (click)=\"itemClick($event,itemData)\">\n                      {{itemData.label}}\n                      <ng-container *ngIf=\"itemData.icon!=null\">\n                          <i [class]=\"itemData.iconStyleClass\" aria-hidden=\"true\"></i>\n                      </ng-container>\n                  </a>\n              </ng-container>\n          </ul>\n      </div>\n      \n  ",
            },] },
];
/**
 * @nocollapse
 */
ButtonDropdownComponent.ctorParameters = function () { return []; };
ButtonDropdownComponent.propDecorators = {
    'label': [{ type: Input },],
    'type': [{ type: Input },],
    'size': [{ type: Input },],
    'dropdownItemRef': [{ type: ContentChildren, args: [DropdownItemComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var ButtonSplitDropdownComponent = (function () {
    function ButtonSplitDropdownComponent() {
        this.onClick = new EventEmitter();
        this.elementId = 'button-dropdown' + new Date().getTime() + Math.random();
    }
    /**
     * @return {?}
     */
    ButtonSplitDropdownComponent.prototype.ngOnInit = function () {
        this.btnStyleClass = 'btn ';
        this.btnDropdownStyle = 'dropdown-toggle';
        if (this.type !== '' || this.type != null) {
            if (this.type === 'warning') {
                this.btnStyleClass = this.btnStyleClass + 'btn-warning';
            }
            else if (this.type === 'primary') {
                this.btnStyleClass = this.btnStyleClass + 'btn-primary';
            }
            else if (this.type === 'success') {
                this.btnStyleClass = this.btnStyleClass + 'btn-success';
            }
            else if (this.type === 'danger') {
                this.btnStyleClass = this.btnStyleClass + 'btn-danger';
            }
        }
        else {
            this.btnStyleClass = this.btnStyleClass + 'btn-secondary';
        }
        if (this.size != null) {
            this.btnGroupStyleClass = 'btn-group ';
            if (this.size != null) {
                if (this.size === 'large') {
                    this.btnGroupStyleClass = this.btnGroupStyleClass.concat(' btn-group-lg');
                }
                else if (this.size === 'small') {
                    this.btnGroupStyleClass = this.btnGroupStyleClass.concat(' btn-group-sm');
                }
            }
        }
        this.btnDropdownStyle = this.btnStyleClass + ' ' + this.btnDropdownStyle;
    };
    /**
     * @return {?}
     */
    ButtonSplitDropdownComponent.prototype.ngAfterContentInit = function () {
        this.createConfig();
    };
    /**
     * @return {?}
     */
    ButtonSplitDropdownComponent.prototype.createConfig = function () {
        this.dropdownItemData = [];
        this.createDropdownItemConfig();
    };
    /**
     * @return {?}
     */
    ButtonSplitDropdownComponent.prototype.createDropdownItemConfig = function () {
        var /** @type {?} */ itemRefArray = [];
        itemRefArray = this.dropdownItemRef.toArray();
        for (var /** @type {?} */ cr = 0; cr < itemRefArray.length; cr++) {
            var /** @type {?} */ itemConfig = itemRefArray[cr];
            var /** @type {?} */ data = { label: itemConfig.label, disabled: itemConfig.disabled, onItemClick: itemConfig.onItemClick, iconStyleClass: itemConfig.iconStyleClass, icon: itemConfig.icon, onClickRoute: itemConfig.onClickRoute };
            data.iconStyleClass = 'fa fa-' + data.icon + ' pull-right';
            this.dropdownItemData.push(data);
        }
    };
    /**
     * @param {?} event
     * @param {?} itemData
     * @return {?}
     */
    ButtonSplitDropdownComponent.prototype.itemClick = function (event, itemData) {
        itemData.onItemClick.emit(event);
        if (itemData.onClickRoute != null) {
            // this.router.navigate([itemData.onClickRoute]);
        }
    };
    /**
     * @param {?} clickData
     * @return {?}
     */
    ButtonSplitDropdownComponent.prototype.btnClick = function (clickData) {
        this.onClick.emit(clickData);
    };
    return ButtonSplitDropdownComponent;
}());
ButtonSplitDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-btn-split-dropdown',
                template: "\n      \n    <div [class]=\"btnGroupStyleClass\" [attr.id]=\"elementId\">\n        <button type=\"button\" [class]=\"btnStyleClass\">{{label}}</button>\n        <button type=\"button\" [class]=\"btnDropdownStyle\" (click)=\"btnClick($event)\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            <span class=\"sr-only\">Toggle Dropdown</span>\n        </button>\n        <ul class=\"dropdown-menu\">\n            <ng-container *ngFor=\"let itemData of dropdownItemData\">\n                <a class=\"dropdown-item\" [ngClass]=\"{'disabled':itemData.disabled}\" (click)=\"itemClick($event,itemData)\">\n                    {{itemData.label}}\n                    <ng-container *ngIf=\"itemData.icon!=null\">\n                        <i [class]=\"itemData.iconStyleClass\" aria-hidden=\"true\"></i>\n                    </ng-container>\n                </a>\n            </ng-container>\n        </ul>\n    </div>\n    \n  ",
            },] },
];
/**
 * @nocollapse
 */
ButtonSplitDropdownComponent.ctorParameters = function () { return []; };
ButtonSplitDropdownComponent.propDecorators = {
    'label': [{ type: Input },],
    'type': [{ type: Input },],
    'size': [{ type: Input },],
    'onClick': [{ type: Output },],
    'dropdownItemRef': [{ type: ContentChildren, args: [DropdownItemComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var ButtonGroupActionComponent = (function () {
    function ButtonGroupActionComponent() {
        this.onClick = new EventEmitter();
        this.elementId = 'button-group-action' + new Date().getTime() + Math.random();
    }
    /**
     * @return {?}
     */
    ButtonGroupActionComponent.prototype.ngOnInit = function () {
        this.btnStyleClass = 'btn ';
        this.btnSizeStyleClass = '';
        if (this.type !== '' || this.type != null) {
            if (this.type === 'warning') {
                this.btnStyleClass = this.btnStyleClass + 'btn-warning';
            }
            else if (this.type === 'primary') {
                this.btnStyleClass = this.btnStyleClass + 'btn-primary';
            }
            else if (this.type === 'success') {
                this.btnStyleClass = this.btnStyleClass + 'btn-success';
            }
            else if (this.type === 'danger') {
                this.btnStyleClass = this.btnStyleClass + 'btn-danger';
            }
        }
        else {
            this.btnStyleClass = this.btnStyleClass + 'btn-secondary';
        }
        this.iconStyleClass = 'fa fa-' + this.icon;
        if (this.tooltipMessage == null) {
            this.hasToolTip = false;
        }
        if (this.size != null) {
            if (this.size === 'large') {
                this.btnStyleClass = this.btnStyleClass.concat(' btn-lg');
            }
            else if (this.size === 'small') {
                this.btnStyleClass = this.btnStyleClass.concat(' btn-sm');
            }
        }
        if (this.block) {
            this.btnStyleClass = this.btnStyleClass.concat(' btn-block');
        }
    };
    return ButtonGroupActionComponent;
}());
ButtonGroupActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-btn-group-action',
                template: "",
                styles: ["\n    .glyphicon-refresh-animate {\n      -animation: spin .7s infinite linear;\n      -webkit-animation: spin2 .7s infinite linear;\n    }\n\n    @-webkit-keyframes spin2 {\n      from { -webkit-transform: rotate(0deg);}\n      to { -webkit-transform: rotate(360deg);}\n    }\n\n    @keyframes spin {\n      from { transform: scale(1) rotate(0deg);}\n      to { transform: scale(1) rotate(360deg);}\n    }"
                ]
            },] },
];
/**
 * @nocollapse
 */
ButtonGroupActionComponent.ctorParameters = function () { return []; };
ButtonGroupActionComponent.propDecorators = {
    'label': [{ type: Input },],
    'icon': [{ type: Input },],
    'type': [{ type: Input },],
    'onClickRoute': [{ type: Input },],
    'tooltipMessage': [{ type: Input },],
    'disabled': [{ type: Input },],
    'isLoading': [{ type: Input },],
    'size': [{ type: Input },],
    'block': [{ type: Input },],
    'fieldName': [{ type: Input },],
    'onClick': [{ type: Output },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var ButtonGroupComponent = (function () {
    function ButtonGroupComponent() {
        this.elementId = 'button-group' + new Date().getTime() + Math.random();
    }
    /**
     * @return {?}
     */
    ButtonGroupComponent.prototype.ngAfterViewInit = function () {
        $('[data-toggle="popover"]').popover();
    };
    /**
     * @return {?}
     */
    ButtonGroupComponent.prototype.ngAfterContentInit = function () {
        this.createConfig();
    };
    /**
     * @return {?}
     */
    ButtonGroupComponent.prototype.ngOnInit = function () {
        this.btnGroupStyleClass = 'btn-group ';
        if (this.size != null) {
            if (this.size === 'large') {
                this.btnGroupStyleClass = this.btnGroupStyleClass.concat(' btn-group-lg');
            }
            else if (this.size === 'small') {
                this.btnGroupStyleClass = this.btnGroupStyleClass.concat(' btn-group-sm');
            }
        }
        if (this.popoverPlacement == null) {
            this.popoverPlacement = 'bottom';
        }
    };
    /**
     * @return {?}
     */
    ButtonGroupComponent.prototype.createConfig = function () {
        this.buttonData = [];
        this.createButtonConfig();
    };
    /**
     * @param {?} event
     * @param {?} btnObj
     * @return {?}
     */
    ButtonGroupComponent.prototype.buttonClick = function (event, btnObj) {
        btnObj.onClick.emit(event);
        if (btnObj.onClickRoute != null) {
            // this.router.navigate([this.onClickRoute]);
        }
    };
    /**
     * @return {?}
     */
    ButtonGroupComponent.prototype.createButtonConfig = function () {
        var /** @type {?} */ buttonRefArray = [];
        buttonRefArray = this.buttonComponentRef.toArray();
        for (var /** @type {?} */ cr = 0; cr < buttonRefArray.length; cr++) {
            var /** @type {?} */ buttonConfig = buttonRefArray[cr];
            var /** @type {?} */ data = {
                label: buttonConfig.label, onClick: buttonConfig.onClick,
                icon: buttonConfig.icon, type: buttonConfig.type,
                tooltipMessage: buttonConfig.tooltipMessage, onClickRoute: buttonConfig.onClickRoute,
                disabled: buttonConfig.disabled, isLoading: buttonConfig.isLoading,
                fieldName: buttonConfig.fieldName, btnStyleClass: buttonConfig.btnStyleClass,
                iconStyleClass: buttonConfig.iconStyleClass, btnSizeStyleClass: buttonConfig.btnSizeStyleClass,
                hasToolTip: buttonConfig.hasToolTip, elementId: buttonConfig.elementId
            };
            this.buttonData.push(data);
        }
    };
    return ButtonGroupComponent;
}());
ButtonGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-btn-group',
                template: "    \n      <div [class]=\"btnGroupStyleClass\" role=\"group\" [attr.id]=\"elementId\">\n        <button *ngFor=\"let data of buttonData\" type=\"button\" (click)=\"buttonClick($event,data)\"\n                [class]=\"data.btnStyleClass\"\n                [attr.fieldName] = \"data.fieldName\"\n                [attr.disabled] = \"data.disabled ? true: null\"\n                data-toggle=\"tooltip\" [attr.data-placement]=\"popoverPlacement\" [attr.title]=\"data.tooltipMessage\"\n        >\n          <ng-container *ngIf=\"data.isLoading\">\n            <i class=\"fa fa-refresh fa-spin \" aria-hidden=\"true\"></i>&nbsp;&nbsp;&nbsp;\n          </ng-container>\n          {{data.label}}\n          <ng-container *ngIf=\"data.iconStyleClass!=null\">\n            <i [class]=\"data.iconStyleClass\" aria-hidden=\"true\"></i>\n          </ng-container>\n        </button>\n      </div>\n      <ng-content></ng-content>\n  ",
            },] },
];
/**
 * @nocollapse
 */
ButtonGroupComponent.ctorParameters = function () { return []; };
ButtonGroupComponent.propDecorators = {
    'size': [{ type: Input },],
    'popoverPlacement': [{ type: Input },],
    'buttonComponentRef': [{ type: ContentChildren, args: [ButtonGroupActionComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var CHECK_COLUMN_SIZE = 'col-lg-';
var CheckBoxGroup = (function () {
    /**
     * @param {?} amxHttp
     */
    function CheckBoxGroup(amxHttp) {
        this.amxHttp = amxHttp;
        this.selectedValue = new EventEmitter();
        this.elementId = 'check-box-group-' + new Date().getTime();
        this.selectedCheckBox = [];
    }
    /**
     * @return {?}
     */
    CheckBoxGroup.prototype.ngOnInit = function () {
        var _this = this;
        this.calculatedColSize = CHECK_COLUMN_SIZE + this.column;
        if (this.httpMethod && this.httpUrl) {
            this.amxHttp.fetchData(this.httpUrl, this.httpMethod).subscribe(function (response) {
                _this.responseData = response.json();
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        else if (this.checkBoxGroupDownBindData) {
            this.setData(this.checkBoxGroupDownBindData);
        }
    };
    /**
     * @return {?}
     */
    CheckBoxGroup.prototype.ngAfterViewInit = function () {
        /*  this.column = CHECK_COLUMN_SIZE+this.column;
         if(this.httpMethod && this.httpUrl){
         this.amxHttp.fetchData(this.httpUrl,this.httpMethod).subscribe(
         response=>{
         this.responseData = response.json();
         },
         error=>{
         },
         ()=>{
         this.setData(this.responseData);
         }
         );
         }else if(this.checkBoxGroupDownBindData){
         this.setData(this.checkBoxGroupDownBindData);
         }*/
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    CheckBoxGroup.prototype.setData = function (httpResponse) {
        this.data = this.getResponseData(httpResponse);
        this.viewData = this.getResponseData(httpResponse);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    CheckBoxGroup.prototype.getResponseData = function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        var /** @type {?} */ dr = this.dataReader.split(".");
        for (var /** @type {?} */ ir = 0; ir < dr.length; ir++) {
            responsedata = responsedata[dr[ir]];
        }
        return responsedata;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CheckBoxGroup.prototype.filterData = function (event) {
        if (this.textValue.length > 0) {
            this.viewData = [];
            for (var /** @type {?} */ vd = 0; vd < this.data.length; vd++) {
                var /** @type {?} */ displayData = this.data[vd][this.displayField];
                if (displayData.toLowerCase().startsWith(this.textValue)) {
                    this.viewData.push(this.data[vd]);
                }
            }
        }
        else {
            this.viewData = this.data;
        }
    };
    /**
     * @param {?} rowData
     * @param {?} event
     * @return {?}
     */
    CheckBoxGroup.prototype.setSelectedCheckBox = function (rowData, event) {
        if (event.currentTarget.checked) {
            this.selectedCheckBox.push(rowData);
        }
        else {
            var /** @type {?} */ indexOf = this.selectedCheckBox.indexOf(rowData);
            delete this.selectedCheckBox[indexOf];
        }
        this.emitSelectedRows();
    };
    /**
     * @return {?}
     */
    CheckBoxGroup.prototype.emitSelectedRows = function () {
        var /** @type {?} */ sRows = [];
        for (var /** @type {?} */ sr = 0; sr < this.selectedCheckBox.length; sr++) {
            if (this.selectedCheckBox[sr]) {
                sRows.push(this.selectedCheckBox[sr]);
            }
        }
        this.selectedValue.emit(sRows);
    };
    return CheckBoxGroup;
}());
CheckBoxGroup.decorators = [
    { type: Component, args: [{
                selector: 'amexio-checkbox',
                template: "\n        <div [attr.class]=\"divCss\">\n            <br>\n            <label  [attr.for]=\"elementId\">{{fieldLabel}}</label>\n            <div class=\"\" [ngClass]=\"{'row':column || column!='','list-group':!column ||column==''}\">\n                <li class=\"list-group-item col-sm-12\" *ngIf=\"searchBox\"><span class=\"col-sm-12\"><input [(ngModel)]=\"textValue\" type=\"text\" class=\"form-control\" placeholder=\"Please select\" (keyup)=\"filterData($event)\"></span></li>\n                <li class=\"list-group-item\" [ngClass]=\"calculatedColSize\" *ngFor=\"let row of viewData\">\n                    <label class=\"form-check-label\">\n                        <input  type=\"checkbox\" [checked]=\"row[valueField]\"  (click)=\"setSelectedCheckBox(row, $event)\"> {{row[displayField]}}\n                    </label>\n                </li>\n            </div>\n        </div>\n    ",
                providers: [CommonHttpService],
                styles: ["\n        .has-feedback-custom {\n            position: relative;\n        }\n        .has-feedback-custom .form-control {\n            padding-right: 47.5px;\n        }\n\n        .form-control-feedback-custom {\n            position: absolute;\n            top: 0;\n            right: 0;\n            z-index: 2;\n            display: block;\n            width: 38px;\n            height: 38px;\n            line-height: 38px;\n            text-align: center;\n            pointer-events: none;\n        }\n\n        .has-feedback-custom label ~ .form-control-feedback-custom {\n            top: 32px;\n        }\n        .has-feedback-custom label.sr-only ~ .form-control-feedback-custom {\n            top: 0;\n        }\n\n        .searchIconPos{\n            position: absolute;\n            right: 5px;\n            top: 15px;\n            bottom: 0;\n            height: 14px;\n            margin: auto;\n            font-size: 14px;\n            cursor: pointer;\n            color: #ccc;\n        }\n        .showIcon{\n            visibility: visible;\n        }\n        .hideIcon{\n            visibility: hidden;\n        }\n        .scrollable-options {\n            height: auto;\n            max-height: 200px;\n            overflow-x: hidden;\n        }\n    "]
            },] },
];
/**
 * @nocollapse
 */
CheckBoxGroup.ctorParameters = function () { return [
    { type: CommonHttpService, },
]; };
CheckBoxGroup.propDecorators = {
    'fieldLabel': [{ type: Input },],
    'fieldName': [{ type: Input },],
    'dataReader': [{ type: Input },],
    'httpMethod': [{ type: Input },],
    'httpUrl': [{ type: Input },],
    'displayField': [{ type: Input },],
    'valueField': [{ type: Input },],
    'searchBox': [{ type: Input },],
    'checkBoxGroupDownBindData': [{ type: Input },],
    'column': [{ type: Input },],
    'selectedValue': [{ type: Output },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var DateTimeComponent = (function () {
    /**
     * @param {?} ngControl
     */
    function DateTimeComponent(ngControl) {
        this.dateChange = new EventEmitter();
        this.timepickerOptions = {};
        this.datepickerOptions = {};
        this.hasClearButton = false;
        this.idDatePicker = uniqueId('q-datepicker_');
        this.idTimePicker = uniqueId('q-timepicker_');
        this.onChange = function (_) {
        };
        this.onTouched = function () {
        };
        ngControl.valueAccessor = this; // override valueAccessor
    }
    Object.defineProperty(DateTimeComponent.prototype, "tabindexAttr", {
        /**
         * @return {?}
         */
        get: function () {
            return this.tabindex === undefined ? '-1' : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DateTimeComponent.prototype.ngAfterViewInit = function () {
        this.init();
    };
    /**
     * @return {?}
     */
    DateTimeComponent.prototype.ngOnDestroy = function () {
        if (this.datepicker) {
            this.datepicker.datepicker('destroy');
        }
        if (this.timepicker) {
            this.timepicker.timepicker('remove');
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DateTimeComponent.prototype.ngOnChanges = function (changes) {
        if (changes) {
            if (changes['datepickerOptions'] && this.datepicker) {
                this.datepicker.datepicker('destroy');
                if (changes['datepickerOptions'].currentValue) {
                    this.datepicker = null;
                    this.init();
                }
                else if (changes['datepickerOptions'].currentValue === false) {
                    this.datepicker.remove();
                }
            }
            if (changes['timepickerOptions'] && this.timepicker) {
                this.timepicker.timepicker('remove');
                if (changes['timepickerOptions'].currentValue) {
                    this.timepicker = null;
                    this.init();
                }
                else if (changes['timepickerOptions'].currentValue === false) {
                    this.timepicker.parent().remove();
                }
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DateTimeComponent.prototype.writeValue = function (value) {
        var _this = this;
        this.date = value;
        if (isDate(this.date)) {
            setTimeout(function () {
                _this.updateModel(_this.date);
            }, 0);
        }
        else {
            this.clearModels();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DateTimeComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DateTimeComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DateTimeComponent.prototype.checkEmptyValue = function (e) {
        var /** @type {?} */ value = e.target.value;
        if (value === '' && (this.timepickerOptions === false ||
            this.datepickerOptions === false ||
            (this.timeModel === '' && this.dateModel === ''))) {
            this.dateChange.emit(undefined);
        }
    };
    /**
     * @return {?}
     */
    DateTimeComponent.prototype.clearModels = function () {
        this.dateChange.emit(undefined);
        if (this.timepicker) {
            this.timepicker.timepicker('setTime', null);
        }
        this.updateDatepicker(null);
    };
    /**
     * @return {?}
     */
    DateTimeComponent.prototype.showTimepicker = function () {
        this.timepicker.timepicker('showWidget');
    };
    /**
     * @return {?}
     */
    DateTimeComponent.prototype.showDatepicker = function () {
        this.datepicker.datepicker('show');
    };
    /**
     * @return {?}
     */
    DateTimeComponent.prototype.init = function () {
        var _this = this;
        if (!this.datepicker && this.datepickerOptions !== false) {
            var /** @type {?} */ options = jQuery.extend({ enableOnReadonly: !this.readonly }, this.datepickerOptions);
            this.datepicker = (($('#' + this.idDatePicker))).datepicker(options);
            this.datepicker
                .on('changeDate', function (e) {
                var /** @type {?} */ newDate = e.date;
                if (isDate(_this.date) && isDate(newDate)) {
                    // get hours/minutes
                    newDate.setHours(_this.date.getHours());
                    newDate.setMinutes(_this.date.getMinutes());
                    newDate.setSeconds(_this.date.getSeconds());
                }
                _this.date = newDate;
                _this.dateChange.emit(newDate);
            });
        }
        else if (this.datepickerOptions === false) {
            (($('#' + this.idDatePicker))).remove();
        }
        if (!this.timepicker && this.timepickerOptions !== false) {
            var /** @type {?} */ options = jQuery.extend({ defaultTime: false }, this.timepickerOptions);
            this.timepicker = (($('#' + this.idTimePicker))).timepicker(options);
            this.timepicker
                .on('changeTime.timepicker', function (e) {
                var _a = e.time, meridian = _a.meridian, hours = _a.hours;
                if (meridian) {
                    // has meridian -> convert 12 to 24h
                    if (meridian === 'PM' && hours < 12) {
                        hours = hours + 12;
                    }
                    if (meridian === 'AM' && hours === 12) {
                        hours = hours - 12;
                    }
                    hours = parseInt(_this.pad(hours));
                }
                if (!isDate(_this.date)) {
                    _this.date = new Date();
                    _this.updateDatepicker(_this.date);
                }
                _this.date.setHours(hours);
                _this.date.setMinutes(e.time.minutes);
                _this.date.setSeconds(e.time.seconds);
                _this.dateChange.emit(_this.date);
            });
        }
        else if (this.timepickerOptions === false) {
            (($('#' + this.idTimePicker))).parent().remove();
        }
        this.updateModel(this.date);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DateTimeComponent.prototype.updateModel = function (date) {
        this.updateDatepicker(date);
        // update timepicker
        if (this.timepicker !== undefined && isDate(date)) {
            var /** @type {?} */ hours = date.getHours();
            if (this.timepickerOptions.showMeridian) {
                // Convert 24 to 12 hour system
                hours = (hours === 0 || hours === 12) ? 12 : hours % 12;
            }
            var /** @type {?} */ meridian = date.getHours() >= 12 ? ' PM' : ' AM';
            var /** @type {?} */ time = this.pad(hours) + ':' +
                this.pad(this.date.getMinutes()) + ':' +
                this.pad(this.date.getSeconds()) +
                (this.timepickerOptions.showMeridian || this.timepickerOptions.showMeridian === undefined
                    ? meridian : '');
            this.timepicker.timepicker('setTime', time);
            this.timeModel = time; // fix initial empty timeModel bug
        }
    };
    /**
     * @param {?=} date
     * @return {?}
     */
    DateTimeComponent.prototype.updateDatepicker = function (date) {
        if (this.datepicker !== undefined) {
            this.datepicker.datepicker('update', date);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DateTimeComponent.prototype.pad = function (value) {
        return value.toString().length < 2 ? '0' + value : value.toString();
    };
    return DateTimeComponent;
}());
DateTimeComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-date-time-picker',
                template: "\n    <div class=\"form-inline ng2-datetime\">\n      <div [ngClass]=\"{ 'form-group': true, 'input-group': !datepickerOptions.hideIcon, 'date': true }\">\n        <input id=\"{{idDatePicker}}\" type=\"text\" class=\"form-control\"\n               [attr.readonly]=\"readonly\"\n               [attr.required]=\"required\"\n               [attr.placeholder]=\"datepickerOptions.placeholder || 'Choose date'\"\n               [attr.tabindex]=\"tabindex\"\n               [(ngModel)]=\"dateModel\"\n               (blur)=\"onTouched()\"\n               (keyup)=\"checkEmptyValue($event)\"/>\n        <div [hidden]=\"datepickerOptions.hideIcon || datepickerOptions === false || false\"\n             (click)=\"showDatepicker()\"\n             class=\"input-group-addon\">\n          <i class=\"fa fa-calendar\" aria-hidden=\"true\"></i>\n        </div>\n      </div>\n      <div [ngClass]=\"{ 'form-group': true, 'input-group': !timepickerOptions.hideIcon, 'bootstrap-timepicker timepicker': true }\">\n        <input id=\"{{idTimePicker}}\" type=\"text\" class=\"form-control input-small\"\n               [attr.readonly]=\"readonly\"\n               [attr.required]=\"required\"\n               [attr.placeholder]=\"timepickerOptions.placeholder || 'Set time'\"\n               [attr.tabindex]=\"tabindex\"\n               [(ngModel)]=\"timeModel\"\n               (focus)=\"showTimepicker()\"\n               (blur)=\"onTouched()\"\n               (keyup)=\"checkEmptyValue($event)\">\n        <span [hidden]=\"timepickerOptions.hideIcon || false\" class=\"input-group-addon\">\n                    <i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i>\n                </span>\n      </div>\n      <button *ngIf=\"hasClearButton\" type=\"button\" (click)=\"clearModels()\">Clear</button>\n    </div>\n  ",
                styles: [
                    '.ng2-datetime *[hidden] { display: none; }'
                ]
            },] },
];
/**
 * @nocollapse
 */
DateTimeComponent.ctorParameters = function () { return [
    { type: NgControl, },
]; };
DateTimeComponent.propDecorators = {
    'dateChange': [{ type: Output },],
    'timepickerOptions': [{ type: Input, args: ['timepicker',] },],
    'datepickerOptions': [{ type: Input, args: ['datepicker',] },],
    'hasClearButton': [{ type: Input, args: ['hasClearButton',] },],
    'readonly': [{ type: Input },],
    'required': [{ type: Input },],
    'tabindex': [{ type: Input },],
    'onChange': [{ type: HostListener, args: ['dateChange', ['$event'],] },],
    'onTouched': [{ type: HostListener, args: ['blur',] },],
    'tabindexAttr': [{ type: HostBinding, args: ['attr.tabindex',] },],
};
var id = 0;
/**
 * @param {?} prefix
 * @return {?}
 */
function uniqueId(prefix) {
    return prefix + ++id;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isDate(obj) {
    return Object.prototype.toString.call(obj) === '[object Date]';
}

/**
 * Created by pratik on 24/7/17.
 */
var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var noop$1 = function () {
};
var CUSTOM_DROPDOWN_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return DropDownComponent; }),
    multi: true
};
var BASE_IMPL_DROPDOWN_INPUT = {
    provide: FormInputBase,
    useExisting: forwardRef(function () { return DropDownComponent; })
};
var DropDownComponent = (function (_super) {
    __extends$1(DropDownComponent, _super);
    /**
     * @param {?} amxHttp
     */
    function DropDownComponent(amxHttp) {
        var _this = _super.call(this) || this;
        _this.amxHttp = amxHttp;
        _this.onSingleSelect = new EventEmitter();
        _this.onMultiSelect = new EventEmitter();
        _this.multiSelectValues = [];
        _this.filteredOptions = [];
        _this.nonFilteredRowData = [];
        _this.innerValue = '';
        _this.onTouchedCallback = noop$1;
        _this.onChangeCallback = noop$1;
        _this.elementId = 'dropdown-' + new Date().getTime() + Math.floor(Math.random() * 90000) + 10000;
        return _this;
    }
    /**
     * @return {?}
     */
    DropDownComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.fieldLabel == '' || this.fieldLabel == null)
            this.fieldLabel = 'Choose Option';
        if (this.httpMethod && this.httpUrl) {
            this.amxHttp.fetchData(this.httpUrl, this.httpMethod).subscribe(function (response) {
                _this.responseData = response.json();
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        else if (this.data) {
            this.setData(this.data);
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    DropDownComponent.prototype.setData = function (httpResponse) {
        var _this = this;
        this.multiSelectValues = [];
        var /** @type {?} */ responsedata = httpResponse;
        var /** @type {?} */ dr = this.dataReader.split(".");
        for (var /** @type {?} */ ir = 0; ir < dr.length; ir++) {
            responsedata = responsedata[dr[ir]];
        }
        //Sort Alphabetically
        var /** @type {?} */ sortedData = responsedata.sort(function (a, b) { return a[_this.displayField].toLowerCase() !== b[_this.displayField].toLowerCase() ? a[_this.displayField].toLowerCase() < b[_this.displayField].toLowerCase() ? -1 : 1 : 0; });
        this.filteredOptions = sortedData;
        this.nonFilteredRowData = sortedData;
        if (this.multiSelect) {
            var /** @type {?} */ preSelectedMultiValues_1 = '';
            var /** @type {?} */ optionsChecked_1 = [];
            this.nonFilteredRowData.forEach(function (row) {
                if (row.checked) {
                    optionsChecked_1.push(row[_this.valueField]);
                    _this.multiSelectValues.push(row);
                    preSelectedMultiValues_1 == '' ? preSelectedMultiValues_1 += row[_this.displayField] : preSelectedMultiValues_1 += ',' + row[_this.displayField];
                }
            });
            this.value = optionsChecked_1;
            this.fieldLabel = preSelectedMultiValues_1;
        }
    };
    /**
     * use it to fire external model changes and reflect in dropdown
     * @param {?} event
     * @return {?}
     */
    DropDownComponent.prototype.onChange = function (event) {
        this.value = event;
    };
    /**
     *
     *  use it to detect user selection changes and bind that to Model
     * @param {?} value
     * @param {?} display
     * @param {?} rowData
     * @return {?}
     */
    DropDownComponent.prototype.onUserSelectionChange = function (value, display, rowData) {
        var _this = this;
        if (this.multiSelect) {
            var /** @type {?} */ optionsChecked_2 = [];
            this.multiSelectValues = [];
            if (rowData.hasOwnProperty('checked')) {
                rowData.checked = !rowData.checked;
                this.filteredOptions.forEach(function (row) {
                    if (row.checked) {
                        optionsChecked_2.push(row[_this.valueField]);
                        _this.multiSelectValues.push(row);
                    }
                });
                this.value = optionsChecked_2;
                this.onMultiSelect.emit(this.multiSelectValues);
            }
        }
        else {
            this.value = value;
            this.onSingleSelect.emit(rowData);
        }
    };
    /**
     * Show Multi-Selected Value's Display Field
     * @param {?} multiSelectedValues
     * @return {?}
     */
    DropDownComponent.prototype.getMultiDisplayField = function (multiSelectedValues) {
        var _this = this;
        var /** @type {?} */ multiSelectDisplayString = '';
        this.multiSelectValues.forEach(function (row) {
            multiSelectDisplayString == '' ? multiSelectDisplayString += row[_this.displayField] : multiSelectDisplayString += ',' + row[_this.displayField];
        });
        if (this.multiSelectValues.length > 0)
            return multiSelectDisplayString;
        else
            return 'Choose Options';
    };
    /**
     * Show Single Selected Value's Display Field
     * @param {?} selectedValue
     * @return {?}
     */
    DropDownComponent.prototype.getDisplayField = function (selectedValue) {
        var _this = this;
        var /** @type {?} */ displaySelectedOption = '';
        if (this.filteredOptions != null) {
            this.filteredOptions.forEach(function (row) {
                if (row[_this.valueField] == selectedValue) {
                    displaySelectedOption = row[_this.displayField];
                }
            });
        }
        return displaySelectedOption;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DropDownComponent.prototype.onDropDownSearchKeyUp = function (event) {
        var _this = this;
        var /** @type {?} */ keyword = event.target.value;
        if (keyword != null && keyword != '' && keyword != ' ') {
            this.filteredOptions = [];
            var /** @type {?} */ search_Term_1 = keyword.toLowerCase();
            this.nonFilteredRowData.forEach(function (row) {
                if (row[_this.displayField].toLowerCase().startsWith(search_Term_1)) {
                    _this.filteredOptions.push(row);
                }
            });
        }
        if (keyword == '') {
            this.filteredOptions = this.nonFilteredRowData;
        }
    };
    Object.defineProperty(DropDownComponent.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this.innerValue;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    
    /**
     * @return {?}
     */
    DropDownComponent.prototype.onBlur = function () {
        this.onTouchedCallback();
        // this.validate();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DropDownComponent.prototype.writeValue = function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DropDownComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DropDownComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    return DropDownComponent;
}(FormInputBase));
DropDownComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-dropdown',
                template: "\n        <!-- Faux input to handle Bindings -->\n        <input type=\"hidden\"\n               (blur)=\"onBlur()\"\n               [ngModel]=\"value\"\n               (ngModelChange)=\"onChange($event)\"\n        />\n\n        <div class=\"dropdown\" [style.width]=\"width\">\n\n            <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" [attr.id]=\"elementId\" data-toggle=\"dropdown\"\n                    aria-haspopup=\"true\" aria-expanded=\"false\">\n                <ng-container *ngIf=\"multiSelect\">\n                    {{value != null || '' ? getMultiDisplayField(value) : fieldLabel}}\n                </ng-container>\n\n                <ng-container *ngIf=\"!multiSelect\">\n                    {{value != null || '' ? getDisplayField(value) : fieldLabel}}\n                </ng-container>\n\n            </button>\n            <div class=\"dropdown-menu scrollable-options\" [attr.aria-labelledby]=\"elementId\">\n                <input *ngIf=\"searchBox\" type=\"text\" class=\"dropdown-item form-control\" (keyup)=\"onDropDownSearchKeyUp($event)\"\n                       placeholder=\"Search\"/>\n                <a class=\"dropdown-item\" *ngFor=\"let row of filteredOptions\"\n                   (click)=\"onUserSelectionChange(row[valueField],row[displayField],row)\">\n                    {{row[displayField]}} <i class=\"fa fa-check pull-right\" aria-hidden=\"true\" *ngIf=\"row?.checked\"></i>\n                </a>\n\n\n                <ng-template *ngIf=\"filteredOptions.length < 1\">\n                    <a class=\"dropdown-item disabled\">No Options</a>\n                </ng-template>\n\n            </div>\n        </div>\n\n    ",
                providers: [CUSTOM_DROPDOWN_CONTROL_VALUE_ACCESSOR, BASE_IMPL_DROPDOWN_INPUT]
            },] },
];
/**
 * @nocollapse
 */
DropDownComponent.ctorParameters = function () { return [
    { type: CommonHttpService, },
]; };
DropDownComponent.propDecorators = {
    'dataReader': [{ type: Input },],
    'httpMethod': [{ type: Input },],
    'httpUrl': [{ type: Input },],
    'displayField': [{ type: Input },],
    'valueField': [{ type: Input },],
    'data': [{ type: Input },],
    'multiSelect': [{ type: Input },],
    'searchBox': [{ type: Input },],
    'width': [{ type: Input },],
    'onSingleSelect': [{ type: Output },],
    'onMultiSelect': [{ type: Output },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var noop$2 = function () {
};
var CUSTOM_EMAIL_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return EmailInputComponent; }),
    multi: true
};
var BASE_IMPL_EMAIL_INPUT = {
    provide: FormInputBase,
    useExisting: forwardRef(function () { return EmailInputComponent; })
};
var EmailInputComponent = (function (_super) {
    __extends$2(EmailInputComponent, _super);
    function EmailInputComponent() {
        var _this = _super.call(this) || this;
        _this.innerValue = '';
        _this.onTouchedCallback = noop$2;
        _this.onChangeCallback = noop$2;
        _this.elementId = 'input-email-' + new Date().getTime() + Math.random();
        _this.spanId = 'span-msg-' + Math.random();
        if (_this.iconFeedBack)
            _this.divCss = 'form-group has-feedback';
        else
            _this.divCss = 'form-group has-feedback has-feedback-custom';
        return _this;
    }
    /**
     * @return {?}
     */
    EmailInputComponent.prototype.ngOnInit = function () {
        if (this.errorMsg)
            this.helpInfoMsg = this.errorMsg + '<br/>';
        //Regex check
        if (this.pattern != null) {
            this.regEx = new RegExp(this.pattern);
        }
        if (this.popoverPlacement == null) {
            this.popoverPlacement = 'bottom';
        }
        if (this.enablePopOver) {
            this.popoverField = 'popover';
        }
    };
    /**
     * @return {?}
     */
    EmailInputComponent.prototype.ngAfterViewInit = function () {
        $('[data-toggle="popover"]').popover();
    };
    Object.defineProperty(EmailInputComponent.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this.innerValue;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    
    /**
     * @return {?}
     */
    EmailInputComponent.prototype.onBlur = function () {
        this.onTouchedCallback();
        this.validate();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EmailInputComponent.prototype.writeValue = function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    EmailInputComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    EmailInputComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @return {?}
     */
    EmailInputComponent.prototype.validate = function () {
        this.isValid = this.isValidInput();
    };
    /**
     * @return {?}
     */
    EmailInputComponent.prototype.isValidInput = function () {
        var /** @type {?} */ hasError = false;
        var /** @type {?} */ valueLength = 0;
        if (this.value != null) {
            valueLength = this.value.length;
        }
        if ((!this.allowBlank && (!this.value || valueLength == 0))) {
            hasError = true;
        }
        else if (this.pattern != null && !this.regEx.test(this.value)) {
            hasError = true;
        }
        else {
            var /** @type {?} */ cmp = document.getElementById(this.elementId);
            hasError = !cmp.validity.valid;
        }
        if (hasError) {
            this.setValidClassNames();
        }
        else {
            this.setInvalidatedClassNames();
        }
        return hasError;
    };
    return EmailInputComponent;
}(FormInputBase));
EmailInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-email-input',
                template: "\n      <div [attr.class]=\"divCss\">\n\n        <ng-container *ngIf=\"hasLabel\">\n          <label [attr.for]=\"elementId\"\n                 [style.font-style]=\"fontStyle\"\n                 [style.font-family]=\"fontFamily\"\n                 [style.font-size]=\"fontSize\"\n                 class=\"control-label\">\n            {{fieldLabel}}\n          </label>\n        </ng-container>\n\n        <input type=\"email\"\n               pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,3}$\"\n               (blur)=\"onBlur()\"\n               [(ngModel)]=\"value\"\n               [attr.fieldName] = \"fieldName\"\n               [attr.id]=\"elementId\"\n               [attr.placeholder]=\"placeholder\"\n               [attr.maxLength]=\"maxLength\"\n               [attr.minLength]=\"minLength\"\n               [attr.disabled] = \"disabled ? true: null\"\n               [required]=\"allowBlank ? true: null\"\n               [attr.data-error]=\"errorMsg\"\n               [attr.aria-describedby]=\"spanId\"\n               autocomplete=\"off\"\n               class=\"form-control\"\n               [attr.data-toggle]=\"popoverField\" title=\"Info\" [attr.data-placement]=\"popoverPlacement\"  data-trigger=\"focus\"  data-html=\"true\"  [attr.data-content]=\"helpInfoMsg\">\n\n        <ng-container *ngIf=\"iconFeedBack\">\n        <span class=\"form-control-feedback-custom\">\n          <i [attr.class]=\"iconClassName\"></i>\n        </span>\n        </ng-container>\n\n        <ng-container *ngIf=\"!iconFeedBack\">\n          <i [class]=\"fieldglyphIcon\"></i>\n        </ng-container>\n\n      </div>\n\n\n    ",
                providers: [CUSTOM_EMAIL_INPUT_CONTROL_VALUE_ACCESSOR, BASE_IMPL_EMAIL_INPUT],
                styles: ["\n        .has-feedback-custom {\n            position: relative;\n        }\n        .has-feedback-custom .form-control {\n            padding-right: 47.5px;\n        }\n\n        .form-control-feedback-custom {\n            position: absolute;\n            top: 0;\n            right: 0;\n            z-index: 2;\n            display: block;\n            width: 38px;\n            height: 38px;\n            line-height: 38px;\n            text-align: center;\n            pointer-events: none;\n        }\n\n        .has-feedback-custom label ~ .form-control-feedback-custom {\n            top: 32px;\n        }\n        .has-feedback-custom label.sr-only ~ .form-control-feedback-custom {\n            top: 0;\n        }\n\n        .searchIconPos{\n            position: absolute;\n            right: 5px;\n            top: 15px;\n            bottom: 0;\n            height: 14px;\n            margin: auto;\n            font-size: 14px;\n            cursor: pointer;\n            color: #ccc;\n        }\n        .showIcon{\n            visibility: visible;\n        }\n        .hideIcon{\n            visibility: hidden;\n        }\n        .scrollable-options {\n            height: auto;\n            max-height: 200px;\n            overflow-x: hidden;\n        }\n    "]
            },] },
];
/**
 * @nocollapse
 */
EmailInputComponent.ctorParameters = function () { return []; };

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var __extends$3 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var noop$3 = function () {
};
var CUSTOM_NUMBER_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NumberInputComponent; }),
    multi: true
};
var BASE_IMPL_NUMBER_INPUT = {
    provide: FormInputBase,
    useExisting: forwardRef(function () { return NumberInputComponent; })
};
var NumberInputComponent = (function (_super) {
    __extends$3(NumberInputComponent, _super);
    function NumberInputComponent() {
        var _this = _super.call(this) || this;
        _this.innerValue = '';
        _this.onTouchedCallback = noop$3;
        _this.onChangeCallback = noop$3;
        _this.elementId = 'input-text-' + new Date().getTime() + Math.random();
        _this.spanId = 'span-msg-' + Math.random();
        if (_this.iconFeedBack)
            _this.divCss = 'form-group has-feedback';
        else
            _this.divCss = 'form-group has-feedback has-feedback-custom';
        return _this;
    }
    /**
     * @return {?}
     */
    NumberInputComponent.prototype.ngOnInit = function () {
        if (this.errorMsg)
            this.helpInfoMsg = this.errorMsg + '<br/>';
        if (this.minErrorMsg)
            this.helpInfoMsg = this.helpInfoMsg + 'Min Length: ' + this.minErrorMsg + '<br/>';
        if (this.maxErrorMsg)
            this.helpInfoMsg = this.helpInfoMsg + 'Max Length: ' + this.maxErrorMsg;
        if (!this.iconFeedBack)
            this.fieldglyphIcon = 'form-control-feedback glyphicon glyphicon-' + this.fieldIcon;
        //Regex check
        if (this.pattern != null) {
            this.regEx = new RegExp(this.pattern);
        }
        if (this.enablePopOver) {
            this.popoverField = 'popover';
        }
        if (this.popoverPlacement == null) {
            this.popoverPlacement = 'bottom';
        }
    };
    /**
     * @return {?}
     */
    NumberInputComponent.prototype.ngAfterViewInit = function () {
        $('[data-toggle="popover"]').popover();
    };
    Object.defineProperty(NumberInputComponent.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this.innerValue;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    
    /**
     * @return {?}
     */
    NumberInputComponent.prototype.onBlur = function () {
        this.onTouchedCallback();
        this.validate();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NumberInputComponent.prototype.writeValue = function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NumberInputComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NumberInputComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @return {?}
     */
    NumberInputComponent.prototype.validate = function () {
        this.isValid = this.isValidInput();
    };
    /**
     * @return {?}
     */
    NumberInputComponent.prototype.isValidInput = function () {
        var /** @type {?} */ hasError = false;
        var /** @type {?} */ valueLength = 0;
        if (this.value != null) {
            valueLength = this.value.length;
        }
        if ((!this.allowBlank && (!this.value || valueLength == 0))) {
            hasError = true;
        }
        else if (this.pattern != null && !this.regEx.test(this.value)) {
            hasError = true;
        }
        else if (this.minValue > this.value) {
            hasError = true;
        }
        else if (this.maxValue < this.value) {
            hasError = true;
        }
        if (hasError) {
            this.setValidClassNames();
        }
        else {
            this.setInvalidatedClassNames();
        }
        return hasError;
    };
    /**
     * @return {?}
     */
    NumberInputComponent.prototype.setValidClassNames = function () {
        this.divCss = 'form-group has-error has-feedback';
        this.iconName = 'error';
        this.iconClassName = 'glyphicon glyphicon-remove form-control-feedback';
    };
    /**
     * @return {?}
     */
    NumberInputComponent.prototype.setInvalidatedClassNames = function () {
        this.divCss = 'form-group has-success has-feedback';
        this.iconName = 'success';
        this.iconClassName = 'glyphicon glyphicon-ok form-control-feedback';
    };
    return NumberInputComponent;
}(FormInputBase));
NumberInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-number-input',
                template: "\n        <div [attr.class]=\"divCss\">\n\n            <ng-container *ngIf=\"hasLabel\">\n                <label [attr.for]=\"elementId\"\n                       [style.font-style]=\"fontStyle\"\n                       [style.font-family]=\"fontFamily\"\n                       [style.font-size]=\"fontSize\"\n                       class=\"control-label\">\n                    {{fieldLabel}}\n                </label>\n            </ng-container>\n\n            <input type=\"number\"\n                   (blur)=\"onBlur()\"\n                   autocomplete=\"off\"\n                   class=\"form-control\"\n                   [(ngModel)]=\"value\"\n                   [attr.fieldName] = \"fieldName\"\n                   [attr.id]=\"elementId\"\n                   [attr.placeholder]=\"placeholder\"\n                   [attr.max]=\"maxValue\"\n                   [attr.min]=\"minValue\"\n                   [attr.disabled] = \"disabled ? true: null\"\n                   [required]=\"allowBlank ? true: null\"\n                   [attr.data-error]=\"errorMsg\"\n                   [attr.aria-describedby]=\"spanId\"\n                   data-toggle=\"popover\" title=\"Info\" [attr.data-placement]=\"popoverPlacement\"  data-trigger=\"focus\"  data-html=\"true\"  [attr.data-content]=\"helpInfoMsg\"\n            >\n\n\n            <ng-container *ngIf=\"iconFeedBack\">\n                <span [attr.class]=\"iconClassName\" aria-hidden=\"true\"></span>\n                <span [attr.id]=\"spanId\" class=\"sr-only\">({{iconName}})</span>\n            </ng-container>\n\n            <ng-container *ngIf=\"!iconFeedBack\">\n                <i [class]=\"fieldglyphIcon\"></i>\n            </ng-container>\n\n            <div class=\"help-block with-errors\"></div>\n\n        </div>\n\n\n    ",
                providers: [CUSTOM_NUMBER_INPUT_CONTROL_VALUE_ACCESSOR, BASE_IMPL_NUMBER_INPUT],
                styles: ["\n        .has-feedback-custom {\n            position: relative;\n        }\n        .has-feedback-custom .form-control {\n            padding-right: 47.5px;\n        }\n\n        .form-control-feedback-custom {\n            position: absolute;\n            top: 0;\n            right: 0;\n            z-index: 2;\n            display: block;\n            width: 38px;\n            height: 38px;\n            line-height: 38px;\n            text-align: center;\n            pointer-events: none;\n        }\n\n        .has-feedback-custom label ~ .form-control-feedback-custom {\n            top: 32px;\n        }\n        .has-feedback-custom label.sr-only ~ .form-control-feedback-custom {\n            top: 0;\n        }\n\n        .searchIconPos{\n            position: absolute;\n            right: 5px;\n            top: 15px;\n            bottom: 0;\n            height: 14px;\n            margin: auto;\n            font-size: 14px;\n            cursor: pointer;\n            color: #ccc;\n        }\n        .showIcon{\n            visibility: visible;\n        }\n        .hideIcon{\n            visibility: hidden;\n        }\n        .scrollable-options {\n            height: auto;\n            max-height: 200px;\n            overflow-x: hidden;\n        }\n    "]
            },] },
];
/**
 * @nocollapse
 */
NumberInputComponent.ctorParameters = function () { return []; };
NumberInputComponent.propDecorators = {
    'minValue': [{ type: Input },],
    'maxValue': [{ type: Input },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var __extends$4 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var noop$4 = function () {
};
var CUSTOM_PASSWORD_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return PasswordInputComponent; }),
    multi: true
};
var BASE_IMPL_PASSWORD_INPUT = {
    provide: FormInputBase,
    useExisting: forwardRef(function () { return PasswordInputComponent; })
};
var PasswordInputComponent = (function (_super) {
    __extends$4(PasswordInputComponent, _super);
    function PasswordInputComponent() {
        var _this = _super.call(this) || this;
        _this.innerValue = '';
        _this.onTouchedCallback = noop$4;
        _this.onChangeCallback = noop$4;
        _this.elementId = 'input-text-' + new Date().getTime() + Math.random();
        _this.spanId = 'span-msg-' + Math.random();
        if (_this.iconFeedBack)
            _this.divCss = 'form-group has-feedback';
        else
            _this.divCss = 'form-group has-feedback has-feedback-custom';
        return _this;
    }
    /**
     * @return {?}
     */
    PasswordInputComponent.prototype.ngOnInit = function () {
        if (this.errorMsg)
            this.helpInfoMsg = this.errorMsg + '<br/>';
        if (this.minErrorMsg)
            this.helpInfoMsg = this.helpInfoMsg + 'Min Length: ' + this.minErrorMsg + '<br/>';
        if (this.maxErrorMsg)
            this.helpInfoMsg = this.helpInfoMsg + 'Max Length: ' + this.maxErrorMsg;
        if (!this.iconFeedBack)
            this.fieldglyphIcon = 'form-control-feedback glyphicon glyphicon-' + this.fieldIcon;
        //Regex check
        if (this.pattern != null) {
            this.regEx = new RegExp(this.pattern);
        }
        if (this.enablePopOver) {
            this.popoverField = 'popover';
        }
        if (this.popoverPlacement == null) {
            this.popoverPlacement = 'bottom';
        }
    };
    /**
     * @return {?}
     */
    PasswordInputComponent.prototype.ngAfterViewInit = function () {
        $('[data-toggle="popover"]').popover();
    };
    Object.defineProperty(PasswordInputComponent.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this.innerValue;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    
    /**
     * @return {?}
     */
    PasswordInputComponent.prototype.onBlur = function () {
        this.onTouchedCallback();
        this.validate();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PasswordInputComponent.prototype.writeValue = function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PasswordInputComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PasswordInputComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @return {?}
     */
    PasswordInputComponent.prototype.validate = function () {
        this.isValid = this.isValidInput();
    };
    /**
     * @return {?}
     */
    PasswordInputComponent.prototype.isValidInput = function () {
        var /** @type {?} */ hasError = false;
        if ((this.allowBlank && (!this.value || this.value.length == 0))) {
            hasError = true;
        }
        else if (this.minLength > this.value.length) {
            hasError = true;
        }
        else if (this.maxLength < this.value.length) {
            hasError = true;
        }
        else if (this.pattern != null && !this.regEx.test(this.value)) {
            hasError = true;
        }
        if (hasError) {
            this.setValidClassNames();
        }
        else {
            this.setInvalidatedClassNames();
        }
        return hasError;
    };
    /**
     * @return {?}
     */
    PasswordInputComponent.prototype.setValidClassNames = function () {
        this.divCss = 'form-group has-error has-feedback';
        this.iconName = 'error';
        this.iconClassName = 'glyphicon glyphicon-remove form-control-feedback';
    };
    /**
     * @return {?}
     */
    PasswordInputComponent.prototype.setInvalidatedClassNames = function () {
        this.divCss = 'form-group has-success has-feedback';
        this.iconName = 'success';
        this.iconClassName = 'glyphicon glyphicon-ok form-control-feedback';
    };
    return PasswordInputComponent;
}(FormInputBase));
PasswordInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-password-input',
                template: "\n\n        <div [attr.class]=\"divCss\">\n\n            <ng-container *ngIf=\"hasLabel\">\n                <label [attr.for]=\"elementId\"\n                       [style.font-style]=\"fontStyle\"\n                       [style.font-family]=\"fontFamily\"\n                       [style.font-size]=\"fontSize\"\n                       class=\"control-label\">\n                    {{fieldLabel}}\n                </label>\n            </ng-container>\n\n            <input type=\"password\"\n                   (blur)=\"onBlur()\"\n                   autocomplete=\"off\"\n                   class=\"form-control\"\n                   [(ngModel)]=\"value\"\n                   [attr.fieldName] = \"fieldName\"\n                   [attr.id]=\"elementId\"\n                   [attr.placeholder]=\"placeholder\"\n                   [attr.max]=\"maxLength\"\n                   [attr.min]=\"minLength\"\n                   [attr.disabled] = \"disabled ? true: null\"\n                   [required]=\"allowBlank ? true: null\"\n                   [attr.data-error]=\"errorMsg\"\n                   [attr.aria-describedby]=\"spanId\"\n                   [attr.data-toggle]=\"popoverField\" title=\"Info\" [attr.data-placement]=\"popoverPlacement\"  data-trigger=\"focus\"  data-html=\"true\"  [attr.data-content]=\"helpInfoMsg\"\n            >\n\n            <ng-container *ngIf=\"iconFeedBack\">\n                <span [attr.class]=\"iconClassName\" aria-hidden=\"true\"></span>\n                <span [attr.id]=\"spanId\" class=\"sr-only\">({{iconName}})</span>\n            </ng-container>\n\n            <ng-container *ngIf=\"!iconFeedBack\">\n                <i [class]=\"fieldglyphIcon\"></i>\n            </ng-container>\n\n            <div class=\"help-block with-errors\"></div>\n\n        </div>\n\n    ",
                providers: [CUSTOM_PASSWORD_INPUT_CONTROL_VALUE_ACCESSOR, BASE_IMPL_PASSWORD_INPUT],
                styles: ["\n        .has-feedback-custom {\n            position: relative;\n        }\n        .has-feedback-custom .form-control {\n            padding-right: 47.5px;\n        }\n\n        .form-control-feedback-custom {\n            position: absolute;\n            top: 0;\n            right: 0;\n            z-index: 2;\n            display: block;\n            width: 38px;\n            height: 38px;\n            line-height: 38px;\n            text-align: center;\n            pointer-events: none;\n        }\n\n        .has-feedback-custom label ~ .form-control-feedback-custom {\n            top: 32px;\n        }\n        .has-feedback-custom label.sr-only ~ .form-control-feedback-custom {\n            top: 0;\n        }\n\n        .searchIconPos{\n            position: absolute;\n            right: 5px;\n            top: 15px;\n            bottom: 0;\n            height: 14px;\n            margin: auto;\n            font-size: 14px;\n            cursor: pointer;\n            color: #ccc;\n        }\n        .showIcon{\n            visibility: visible;\n        }\n        .hideIcon{\n            visibility: hidden;\n        }\n        .scrollable-options {\n            height: auto;\n            max-height: 200px;\n            overflow-x: hidden;\n        }\n    "]
            },] },
];
/**
 * @nocollapse
 */
PasswordInputComponent.ctorParameters = function () { return []; };

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var ProgressComponent = (function () {
    function ProgressComponent() {
        this.showProgress = true;
    }
    /**
     * @return {?}
     */
    ProgressComponent.prototype.ngOnInit = function () {
        if (this.infinteMode) {
            this.displayText = 'Please wait';
            this.currentValue = '100';
            this.minValue = '0';
            this.maxValue = '100';
        }
        else
            this.displayText = this.currentValue + '%';
    };
    return ProgressComponent;
}());
ProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-progress-bar',
                template: "\n\n      <div class=\"progress\" *ngIf=\"showProgress\">\n          <div class=\"progress-bar progress-bar-striped {{progressType !=null ? 'bg-'+progressType : ''}} active\" role=\"progressbar\" [attr.aria-valuenow]=\"currentValue\" [attr.aria-valuemin]=\"minValue\" [attr.aria-valuemax]=\"maxValue\" [style.width.%]=\"infinteMode ? 100 : this.currentValue\">\n              <span>{{infinteMode ? displayText : currentValue+'%'}}<span class=\"dotdotdot\"></span></span>\n          </div>\n      </div>\n\n  ",
                styles: ["\n      .progress {\n          margin: 15px;\n      }\n\n      .progress .progress-bar.active {\n          font-weight: 700;\n          animation: progress-bar-stripes .5s linear infinite;\n      }\n\n      .dotdotdot:after {\n          font-weight: 300;\n          content: '...';\n          display: inline-block;\n          width: 20px;\n          text-align: left;\n          animation: dotdotdot 1.5s linear infinite;\n      }\n\n      @keyframes dotdotdot {\n          0%   { content: '...'; }\n          25% { content: ''; }\n          50% { content: '.'; }\n          75% { content: '..'; }\n      }"]
            },] },
];
/**
 * @nocollapse
 */
ProgressComponent.ctorParameters = function () { return []; };
ProgressComponent.propDecorators = {
    'showProgress': [{ type: Input },],
    'infinteMode': [{ type: Input },],
    'minValue': [{ type: Input },],
    'maxValue': [{ type: Input },],
    'currentValue': [{ type: Input },],
    'progressType': [{ type: Input },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var COLUMN_SIZE = 'col-lg-';
var RadioGroupComponent = (function () {
    /**
     * @param {?} amxHttp
     */
    function RadioGroupComponent(amxHttp) {
        this.amxHttp = amxHttp;
        this.selectedValue = new EventEmitter();
        this.elementId = "radio-group-" + new Date().getTime();
        this.selectedCheckBox = [];
    }
    /**
     * @return {?}
     */
    RadioGroupComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.calculatedColSize = COLUMN_SIZE + this.column;
        if (this.httpMethod && this.httpUrl) {
            this.amxHttp.fetchData(this.httpUrl, this.httpMethod).subscribe(function (response) {
                _this.responseData = response.json();
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        else if (this.radioGroupBindData) {
            this.setData(this.radioGroupBindData);
        }
    };
    /**
     * @return {?}
     */
    RadioGroupComponent.prototype.ngAfterViewInit = function () {
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    RadioGroupComponent.prototype.setData = function (httpResponse) {
        this.data = this.getResponseData(httpResponse);
        this.viewData = this.getResponseData(httpResponse);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    RadioGroupComponent.prototype.getResponseData = function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        var /** @type {?} */ dr = this.dataReader.split(".");
        if (dr != null) {
            for (var /** @type {?} */ ir = 0; ir < dr.length; ir++) {
                responsedata = responsedata[dr[ir]];
            }
        }
        return responsedata;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    RadioGroupComponent.prototype.filterData = function (event) {
        if (this.textValue.length > 0) {
            this.viewData = [];
            for (var /** @type {?} */ vd = 0; vd < this.data.length; vd++) {
                var /** @type {?} */ displayData = this.data[vd][this.displayField];
                if (displayData.toLowerCase().startsWith(this.textValue)) {
                    this.viewData.push(this.data[vd]);
                }
            }
        }
        else {
            this.viewData = this.data;
        }
    };
    /**
     * @param {?} rowData
     * @param {?} event
     * @return {?}
     */
    RadioGroupComponent.prototype.setSelectedCheckBox = function (rowData, event) {
        if (event.currentTarget.checked) {
            this.selectedCheckBox.push(rowData);
        }
        else {
            var /** @type {?} */ indexOf = this.selectedCheckBox.indexOf(rowData);
            delete this.selectedCheckBox[indexOf];
        }
        this.emitSelectedRows();
    };
    /**
     * @return {?}
     */
    RadioGroupComponent.prototype.emitSelectedRows = function () {
        var /** @type {?} */ sRows = [];
        for (var /** @type {?} */ sr = 0; sr < this.selectedCheckBox.length; sr++) {
            if (this.selectedCheckBox[sr]) {
                sRows.push(this.selectedCheckBox[sr]);
            }
        }
        this.selectedValue.emit(sRows);
    };
    return RadioGroupComponent;
}());
RadioGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-radio-group',
                template: "\n        <div class=\"form-group\">\n            <br>\n            <label  [attr.for]=\"elementId\">{{fieldLabel}}</label>\n\n            <div class=\"\" [ngClass]=\"{'row':column || column!='','list-group':!column ||column==''}\">\n                <li class=\"list-group-item col-sm-12\" *ngIf=\"searchBox\"><span class=\"col-sm-12\">\n              <input [(ngModel)]=\"textValue\" type=\"text\" class=\"form-control\" placeholder=\"Please select\" (keyup)=\"filterData($event)\">\n            </span></li>\n                <li class=\"list-group-item\" [ngClass]=\"calculatedColSize\"  *ngFor=\"let row of viewData;let i = index\">\n                    <label class=\"custom-control custom-radio\">\n                        <input class=\"custom-control-input\" [attr.id]=\"elementId+'CNT'+i\" type=\"radio\" [required]=\"allowBlank ? true: null\"  [attr.name] = \"fieldName\" (click)=\"setSelectedCheckBox(row, $event)\">\n                        <span class=\"custom-control-indicator\"></span>\n                        <span class=\"custom-control-description\">{{row[displayField]}}</span>\n                    </label>\n                </li>\n            </div>\n\n        </div>\n\n    ",
                styles: ["\n        .has-feedback-custom {\n            position: relative;\n        }\n        .has-feedback-custom .form-control {\n            padding-right: 47.5px;\n        }\n\n        .form-control-feedback-custom {\n            position: absolute;\n            top: 0;\n            right: 0;\n            z-index: 2;\n            display: block;\n            width: 38px;\n            height: 38px;\n            line-height: 38px;\n            text-align: center;\n            pointer-events: none;\n        }\n\n        .has-feedback-custom label ~ .form-control-feedback-custom {\n            top: 32px;\n        }\n        .has-feedback-custom label.sr-only ~ .form-control-feedback-custom {\n            top: 0;\n        }\n\n        .searchIconPos{\n            position: absolute;\n            right: 5px;\n            top: 15px;\n            bottom: 0;\n            height: 14px;\n            margin: auto;\n            font-size: 14px;\n            cursor: pointer;\n            color: #ccc;\n        }\n        .showIcon{\n            visibility: visible;\n        }\n        .hideIcon{\n            visibility: hidden;\n        }\n        .scrollable-options {\n            height: auto;\n            max-height: 200px;\n            overflow-x: hidden;\n        }\n    "]
            },] },
];
/**
 * @nocollapse
 */
RadioGroupComponent.ctorParameters = function () { return [
    { type: CommonHttpService, },
]; };
RadioGroupComponent.propDecorators = {
    'fieldLabel': [{ type: Input },],
    'fieldName': [{ type: Input },],
    'allowBlank': [{ type: Input },],
    'dataReader': [{ type: Input },],
    'httpMethod': [{ type: Input },],
    'httpUrl': [{ type: Input },],
    'displayField': [{ type: Input },],
    'valueField': [{ type: Input },],
    'radioGroupBindData': [{ type: Input },],
    'searchBox': [{ type: Input },],
    'column': [{ type: Input },],
    'selectedValue': [{ type: Output },],
};

var RatingInputComponent = (function () {
    function RatingInputComponent() {
        // -------------------------------------------------------------------------
        // Inputs
        // -------------------------------------------------------------------------
        this.iconClass = "star-icon";
        this.fullIcon = "★";
        this.emptyIcon = "☆";
        this.titles = [];
        // -------------------------------------------------------------------------
        // Outputs
        // -------------------------------------------------------------------------
        this.onHover = new EventEmitter();
        this.onLeave = new EventEmitter();
        this.hovered = 0;
        this.hoveredPercent = undefined;
        this._max = 5;
    }
    Object.defineProperty(RatingInputComponent.prototype, "max", {
        /**
         * @return {?}
         */
        get: function () {
            return this._max;
        },
        /**
         * @param {?} max
         * @return {?}
         */
        set: function (max) {
            this._max = max;
            this.buildRanges();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    RatingInputComponent.prototype.writeValue = function (value) {
        /*if (value % 1 !== value) {
         this.model = Math.round(value);
         return;
         }*/
        this.model = value;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RatingInputComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RatingInputComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    RatingInputComponent.prototype.validate = function (c) {
        if (this.required && !c.value) {
            return {
                required: true
            };
        }
        return null;
    };
    /**
     * @return {?}
     */
    RatingInputComponent.prototype.ngOnInit = function () {
        this.buildRanges();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    RatingInputComponent.prototype.onKeydown = function (event) {
        if ([37, 38, 39, 40].indexOf(event.which) === -1 || this.hovered)
            return;
        event.preventDefault();
        event.stopPropagation();
        var /** @type {?} */ increment = this.float ? 0.5 : 1;
        this.rate(this.model + (event.which === 38 || event.which === 39 ? increment : increment * -1));
    };
    /**
     * @param {?} item
     * @return {?}
     */
    RatingInputComponent.prototype.calculateWidth = function (item) {
        if (this.hovered > 0) {
            if (this.hoveredPercent !== undefined && this.hovered === item)
                return this.hoveredPercent;
            return this.hovered >= item ? 100 : 0;
        }
        return this.model >= item ? 100 : 100 - Math.round((item - this.model) * 10) * 10;
    };
    /**
     * @param {?} hovered
     * @return {?}
     */
    RatingInputComponent.prototype.setHovered = function (hovered) {
        if (!this.readonly && !this.disabled) {
            this.hovered = hovered;
            this.onHover.emit(hovered);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    RatingInputComponent.prototype.changeHovered = function (event) {
        if (!this.float)
            return;
        var /** @type {?} */ target = (event.target);
        var /** @type {?} */ relativeX = event.pageX - target.offsetLeft;
        var /** @type {?} */ percent = Math.round((relativeX * 100 / target.offsetWidth) / 10) * 10;
        this.hoveredPercent = percent > 50 ? 100 : 50;
    };
    /**
     * @return {?}
     */
    RatingInputComponent.prototype.resetHovered = function () {
        this.hovered = 0;
        this.hoveredPercent = undefined;
        this.onLeave.emit(this.hovered);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    RatingInputComponent.prototype.rate = function (value) {
        if (!this.readonly && !this.disabled && value >= 0 && value <= this.ratingRange.length) {
            var /** @type {?} */ newValue = this.hoveredPercent ? (value - 1) + this.hoveredPercent / 100 : value;
            this.onChange(newValue);
            this.model = newValue;
        }
    };
    /**
     * @return {?}
     */
    RatingInputComponent.prototype.buildRanges = function () {
        this.ratingRange = this.range(1, this.max);
    };
    /**
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    RatingInputComponent.prototype.range = function (start, end) {
        var /** @type {?} */ foo = [];
        for (var /** @type {?} */ i = start; i <= end; i++) {
            foo.push(i);
        }
        return foo;
    };
    return RatingInputComponent;
}());
RatingInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-rating-input',
                template: "\n    <span (mouseleave)=\"resetHovered()\"\n          class=\"rating\"\n          [class.disabled]=\"disabled\"\n          [class.readonly]=\"readonly\"\n          tabindex=\"0\"\n          role=\"slider\"\n          aria-valuemin=\"0\"\n          [attr.aria-valuemax]=\"ratingRange.length\"\n          [attr.aria-valuenow]=\"model\">\n    <span *ngFor=\"let item of ratingRange; let index = index\">\n        <i (mouseenter)=\"setHovered(item)\"\n           (mousemove)=\"changeHovered($event)\"\n           (click)=\"rate(item)\"\n           [attr.data-icon]=\"fullIcon\"\n           class=\"{{ iconClass }} half{{ calculateWidth(item) }}\"\n           [title]=\"titles[index] || item\">{{ emptyIcon }}</i>\n    </span>\n</span>\n  ",
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return RatingInputComponent; }), multi: true },
                    { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return RatingInputComponent; }), multi: true },
                ],
                styles: ["\n    span.rating {\n      cursor: pointer;\n      outline: none;\n    }\n    span.rating.readonly {\n      cursor: default;\n    }\n    span.rating.disabled {\n      cursor: not-allowed;\n    }\n    span.rating i{\n      font-style: normal;\n    }\n    .star-icon {\n      color: #666666;\n      font-size: 2em;\n      position: relative;\n      border-color: 1px solid black;\n    }\n    .star-icon:before {\n      color: #FDE16D;\n      content: attr(data-icon) \" \";\n      position: absolute;\n      left: 0;\n      overflow: hidden;\n      width: 0;\n    }\n    span.rating.disabled .star-icon:before {\n      color: #ECECEC;\n      text-shadow: none;\n    }\n    .star-icon.half10:before {\n      width: 10%;\n    }\n    .star-icon.half20:before {\n      width: 20%;\n    }\n    .star-icon.half30:before {\n      width: 30%;\n    }\n    .star-icon.half40:before {\n      width: 40%;\n    }\n    .star-icon.half50:before {\n      width: 50%;\n    }\n    .star-icon.half60:before {\n      width: 60%;\n    }\n    .star-icon.half70:before {\n      width: 70%;\n    }\n    .star-icon.half80:before {\n      width: 80%;\n    }\n    .star-icon.half90:before {\n      width: 90%;\n    }\n    .star-icon.half100:before {\n      width: 100%;\n    }\n    @-moz-document url-prefix() { /* Firefox Hack */\n      .star-icon {\n        font-size: 50px;\n        line-height: 34px;\n      }\n    }\n\n    .has-feedback-custom {\n        position: relative;\n    }\n    .has-feedback-custom .form-control {\n        padding-right: 47.5px;\n    }\n\n    .form-control-feedback-custom {\n        position: absolute;\n        top: 0;\n        right: 0;\n        z-index: 2;\n        display: block;\n        width: 38px;\n        height: 38px;\n        line-height: 38px;\n        text-align: center;\n        pointer-events: none;\n    }\n\n    .has-feedback-custom label ~ .form-control-feedback-custom {\n        top: 32px;\n    }\n    .has-feedback-custom label.sr-only ~ .form-control-feedback-custom {\n        top: 0;\n    }\n\n    .searchIconPos{\n        position: absolute;\n        right: 5px;\n        top: 15px;\n        bottom: 0;\n        height: 14px;\n        margin: auto;\n        font-size: 14px;\n        cursor: pointer;\n        color: #ccc;\n    }\n    .showIcon{\n        visibility: visible;\n    }\n    .hideIcon{\n        visibility: hidden;\n    }\n    .scrollable-options {\n        height: auto;\n        max-height: 200px;\n        overflow-x: hidden;\n    }\n      \n  "]
            },] },
];
/**
 * @nocollapse
 */
RatingInputComponent.ctorParameters = function () { return []; };
RatingInputComponent.propDecorators = {
    'iconClass': [{ type: Input },],
    'fullIcon': [{ type: Input },],
    'emptyIcon': [{ type: Input },],
    'readonly': [{ type: Input },],
    'disabled': [{ type: Input },],
    'required': [{ type: Input },],
    'float': [{ type: Input },],
    'titles': [{ type: Input },],
    'max': [{ type: Input },],
    'onHover': [{ type: Output },],
    'onLeave': [{ type: Output },],
    'onKeydown': [{ type: HostListener, args: ["keydown", ["$event"],] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var __extends$5 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var noop$5 = function () {
};
var CUSTOM_TEXT_AREA_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return TextAreaComponent; }),
    multi: true
};
var BASE_IMPL_TEXTAREA_INPUT = {
    provide: FormInputBase,
    useExisting: forwardRef(function () { return TextAreaComponent; })
};
var TextAreaComponent = (function (_super) {
    __extends$5(TextAreaComponent, _super);
    function TextAreaComponent() {
        var _this = _super.call(this) || this;
        _this.innerValue = '';
        _this.onTouchedCallback = noop$5;
        _this.onChangeCallback = noop$5;
        _this.elementId = 'input-text-' + new Date().getTime() + Math.random();
        _this.spanId = 'span-msg-' + Math.random();
        if (_this.iconFeedBack)
            _this.divCss = 'form-group has-feedback';
        else
            _this.divCss = 'form-group has-feedback has-feedback-custom';
        return _this;
    }
    /**
     * @return {?}
     */
    TextAreaComponent.prototype.ngOnInit = function () {
        if (this.errorMsg)
            this.helpInfoMsg = this.errorMsg + '<br/>';
        if (!this.iconFeedBack)
            this.fieldglyphIcon = 'form-control-feedback glyphicon glyphicon-' + this.fieldIcon;
        //Regex check
        if (this.pattern != null) {
            this.regEx = new RegExp(this.pattern);
        }
        if (this.popoverPlacement == null) {
            this.popoverPlacement = 'bottom';
        }
        if (this.enablePopOver) {
            this.popoverField = 'popover';
        }
    };
    /**
     * @return {?}
     */
    TextAreaComponent.prototype.ngAfterViewInit = function () {
        $('[data-toggle="popover"]').popover();
    };
    Object.defineProperty(TextAreaComponent.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this.innerValue;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    
    /**
     * @return {?}
     */
    TextAreaComponent.prototype.onBlur = function () {
        this.onTouchedCallback();
        this.validate();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TextAreaComponent.prototype.writeValue = function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TextAreaComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TextAreaComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @return {?}
     */
    TextAreaComponent.prototype.validate = function () {
        this.isValid = this.isValidInput();
    };
    /**
     * @return {?}
     */
    TextAreaComponent.prototype.isValidInput = function () {
        var /** @type {?} */ hasError = false;
        if ((this.allowBlank && (!this.value || this.value.length == 0))) {
            hasError = true;
        }
        else if (this.pattern != null && !this.regEx.test(this.value)) {
            hasError = true;
        }
        if (hasError) {
            this.setValidClassNames();
        }
        else {
            this.setInvalidatedClassNames();
        }
        return hasError;
    };
    return TextAreaComponent;
}(FormInputBase));
TextAreaComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-textarea-input',
                template: "<div [attr.class]=\"divCss\">\n\n        <ng-container *ngIf=\"hasLabel\">\n            <label [attr.for]=\"elementId\"\n                   [style.font-style]=\"fontStyle\"\n                   [style.font-family]=\"fontFamily\"\n                   [style.font-size]=\"fontSize\"\n                   class=\"control-label\">\n                {{fieldLabel}}\n            </label>\n        </ng-container>\n\n        <textarea type=\"text\"\n                  (blur)=\"onBlur()\"\n                  autocomplete=\"off\"\n                  class=\"form-control\"\n                  [(ngModel)]=\"value\"\n                  [attr.fieldName] = \"fieldName\"\n                  [attr.rows]=\"noOfrows\"\n                  [attr.cols]=\"noOfCols\"\n                  [attr.id]=\"elementId\"\n                  [attr.placeholder]=\"placeholder\"\n                  [attr.disabled] = \"disabled ? true: null\"\n                  [required]=\"allowBlank ? true: null\"\n                  [attr.data-error]=\"errorMsg\"\n                  [attr.aria-describedby]=\"spanId\"\n                  [attr.data-toggle]=\"popoverField\" title=\"Info\" [attr.data-placement]=\"popoverPlacement\"  data-trigger=\"focus\"  data-html=\"true\"  [attr.data-content]=\"helpInfoMsg\"\n\n        >\n\n        </textarea>\n\n        <ng-container *ngIf=\"!iconFeedBack\">\n            <i [class]=\"fieldglyphIcon\"></i>\n        </ng-container>\n\n        <div class=\"help-block with-errors\"></div>\n\n    </div>\n    ",
                providers: [CUSTOM_TEXT_AREA_INPUT_CONTROL_VALUE_ACCESSOR, BASE_IMPL_TEXTAREA_INPUT],
                styles: ["\n        .has-feedback-custom {\n            position: relative;\n        }\n        .has-feedback-custom .form-control {\n            padding-right: 47.5px;\n        }\n\n        .form-control-feedback-custom {\n            position: absolute;\n            top: 0;\n            right: 0;\n            z-index: 2;\n            display: block;\n            width: 38px;\n            height: 38px;\n            line-height: 38px;\n            text-align: center;\n            pointer-events: none;\n        }\n\n        .has-feedback-custom label ~ .form-control-feedback-custom {\n            top: 32px;\n        }\n        .has-feedback-custom label.sr-only ~ .form-control-feedback-custom {\n            top: 0;\n        }\n\n        .searchIconPos{\n            position: absolute;\n            right: 5px;\n            top: 15px;\n            bottom: 0;\n            height: 14px;\n            margin: auto;\n            font-size: 14px;\n            cursor: pointer;\n            color: #ccc;\n        }\n        .showIcon{\n            visibility: visible;\n        }\n        .hideIcon{\n            visibility: hidden;\n        }\n        .scrollable-options {\n            height: auto;\n            max-height: 200px;\n            overflow-x: hidden;\n        }\n    "]
            },] },
];
/**
 * @nocollapse
 */
TextAreaComponent.ctorParameters = function () { return []; };
TextAreaComponent.propDecorators = {
    'noOfrows': [{ type: Input },],
    'noOfCols': [{ type: Input },],
};

var __extends$6 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var noop$6 = function () {
};
var CUSTOM_AUTO_COMPLETE_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return TypeAheadComponent; }),
    multi: true
};
var BASE_IMPL_AUTO_COMPLETE = {
    provide: FormInputBase,
    useExisting: forwardRef(function () { return TypeAheadComponent; })
};
var TypeAheadComponent = (function (_super) {
    __extends$6(TypeAheadComponent, _super);
    /**
     * @param {?} amxHttp
     */
    function TypeAheadComponent(amxHttp) {
        var _this = _super.call(this) || this;
        _this.amxHttp = amxHttp;
        _this.filteredResult = [];
        _this.showDropDown = false;
        _this.innerValue = '';
        _this.onTouchedCallback = noop$6;
        _this.onChangeCallback = noop$6;
        _this.elementId = 'auto-complete-' + new Date().getTime() + Math.random();
        return _this;
    }
    /**
     * @return {?}
     */
    TypeAheadComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.triggerChar == null) {
            this.triggerChar = 1;
        }
        if (this.httpMethod && this.httpUrl) {
            this.amxHttp.fetchData(this.httpUrl, this.httpMethod).subscribe(function (res) {
                _this.responseData = res.json();
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        else if (this.datalist) {
            this.setData(this.datalist);
        }
    };
    /**
     * @return {?}
     */
    TypeAheadComponent.prototype.ngAfterViewInit = function () {
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TypeAheadComponent.prototype.onKeyUp = function (event) {
        var _this = this;
        this.filteredResult = [];
        this.showDropDown = false;
        var /** @type {?} */ keyword = event.target.value;
        if (keyword != null && keyword != ' ' && keyword.length >= this.triggerChar) {
            var /** @type {?} */ search_term_1 = keyword.toLowerCase();
            this.data.forEach(function (item) {
                if (item != null) {
                    if (item[_this.key].toLowerCase().startsWith(search_term_1)) {
                        _this.filteredResult.push(item);
                    }
                }
            });
            if (this.filteredResult.length > 0)
                this.showOptions();
            else {
                this.showDropDown = false;
            }
        }
    };
    /**
     * @return {?}
     */
    TypeAheadComponent.prototype.showOptions = function () {
        this.showDropDown = true;
    };
    Object.defineProperty(TypeAheadComponent.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this.innerValue;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    
    /**
     * @return {?}
     */
    TypeAheadComponent.prototype.onBlur = function () {
        this.onTouchedCallback();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TypeAheadComponent.prototype.writeValue = function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TypeAheadComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TypeAheadComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    TypeAheadComponent.prototype.setData = function (data) {
        var /** @type {?} */ autocompleteData = this.getResponseData(data);
        if (autocompleteData) {
            this.data = autocompleteData;
        }
    };
    /**
     * @param {?} value
     * @param {?} ref
     * @return {?}
     */
    TypeAheadComponent.prototype.setValue = function (value, ref) {
        this.value = value;
        this.showDropDown = false;
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    TypeAheadComponent.prototype.getResponseData = function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        var /** @type {?} */ dr = this.dataReader.split(".");
        for (var /** @type {?} */ ir = 0; ir < dr.length; ir++) {
            responsedata = responsedata[dr[ir]];
        }
        return responsedata;
    };
    /**
     * @param {?} inp
     * @return {?}
     */
    TypeAheadComponent.prototype.clearResult = function (inp) {
        this.showDropDown = false;
        this.filteredResult = [];
        inp.value = null;
        this.value = null;
    };
    return TypeAheadComponent;
}(FormInputBase));
TypeAheadComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-typeahead',
                template: "    \n    <div class=\"dropdown\" data-toggle=\"dropdown\" [ngClass]=\"{'show': showDropDown}\">\n      <div class=\"row\">\n        <label [attr.for]=\"elementId\">{{fieldLabel}}</label>\n        <input type=\"search\" class=\"form-control\" [attr.aria-expanded]=\"showDropDown\" \n               [attr.id]=\"elementId\"  (keyup)=\"onKeyUp($event)\"\n               (blur)=\"onBlur()\"  [(ngModel)]=\"value\" #inp>\n<!--        <span [ngClass]=\"{'showIcon' : showDropDown,'hideIcon' : !showDropDown}\" (click)=\"clearResult(inp)\" class=\"glyphicon glyphicon-remove-circle searchIconPos\"></span>-->\n      </div>\n     \n      <ul class=\"dropdown-menu\" style=\"width: 100%\">\n        <li *ngFor=\"let item of filteredResult\" (click)=\"setValue(item[key],inp)\" style=\"cursor: pointer;\">\n            {{item[key]}}\n        </li>\n      </ul>\n    </div>\n  ",
                providers: [CUSTOM_AUTO_COMPLETE_CONTROL_VALUE_ACCESSOR, BASE_IMPL_AUTO_COMPLETE, CommonHttpService],
                styles: ["\n      .has-feedback-custom {\n          position: relative;\n      }\n      .has-feedback-custom .form-control {\n          padding-right: 47.5px;\n      }\n\n      .form-control-feedback-custom {\n          position: absolute;\n          top: 0;\n          right: 0;\n          z-index: 2;\n          display: block;\n          width: 38px;\n          height: 38px;\n          line-height: 38px;\n          text-align: center;\n          pointer-events: none;\n      }\n\n      .has-feedback-custom label ~ .form-control-feedback-custom {\n          top: 32px;\n      }\n      .has-feedback-custom label.sr-only ~ .form-control-feedback-custom {\n          top: 0;\n      }\n\n      .searchIconPos{\n          position: absolute;\n          right: 5px;\n          top: 15px;\n          bottom: 0;\n          height: 14px;\n          margin: auto;\n          font-size: 14px;\n          cursor: pointer;\n          color: #ccc;\n      }\n      .showIcon{\n          visibility: visible;\n      }\n      .hideIcon{\n          visibility: hidden;\n      }\n      .scrollable-options {\n          height: auto;\n          max-height: 200px;\n          overflow-x: hidden;\n      }\n  "]
            },] },
];
/**
 * @nocollapse
 */
TypeAheadComponent.ctorParameters = function () { return [
    { type: CommonHttpService, },
]; };
TypeAheadComponent.propDecorators = {
    'httpUrl': [{ type: Input },],
    'httpMethod': [{ type: Input },],
    'dataReader': [{ type: Input },],
    'datalist': [{ type: Input },],
    'key': [{ type: Input },],
    'triggerChar': [{ type: Input },],
};

var TabComponent = (function () {
    function TabComponent() {
        this.active = false;
        this.disabled = false;
        this.elementId = 'tab-pill' + Math.floor(Math.random() * 90000) + 10000;
    }
    /**
     * @return {?}
     */
    TabComponent.prototype.ngOnInit = function () {
    };
    return TabComponent;
}());
TabComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-tab',
                template: "\n    <div role=\"tabpanel\" class=\"tab-pane active\" [attr.id]=\"elementId\">\n      <ng-content *ngIf=\"active\"></ng-content>\n    </div>\n  ",
                styles: [
                    "\n      .tabcontent {\n        \n        padding: 0px 12px;\n      }  \n    "
                ]
            },] },
];
/**
 * @nocollapse
 */
TabComponent.ctorParameters = function () { return []; };
TabComponent.propDecorators = {
    'title': [{ type: Input },],
    'active': [{ type: Input },],
    'disabled': [{ type: Input },],
    'icon': [{ type: Input },],
};

var TabPaneComponent = (function () {
    function TabPaneComponent() {
        this.elementId = 'tabpane-' + new Date().getTime() + "-" + Math.random().toString(36).substr(2, length);
    }
    /**
     * @return {?}
     */
    TabPaneComponent.prototype.ngOnInit = function () {
    };
    /**
     * @return {?}
     */
    TabPaneComponent.prototype.ngAfterContentInit = function () {
        this.tabs = this.queryTabs.toArray();
    };
    /**
     * @return {?}
     */
    TabPaneComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.reAdjust();
        });
    };
    /**
     * @param {?} elementId
     * @return {?}
     */
    TabPaneComponent.prototype.closeTab = function (elementId) {
        var /** @type {?} */ newTab = [];
        var /** @type {?} */ tabs = this.tabs;
        var /** @type {?} */ index = 0;
        var /** @type {?} */ tabHighlightIndex = 0;
        tabs.forEach(function (tab) {
            tab.active = false;
            if (tab.elementId == elementId) {
                tabHighlightIndex = index;
            }
            if (tab.elementId != elementId) {
                newTab.push(tab);
            }
            index++;
        });
        if (tabHighlightIndex == newTab.length) {
            tabHighlightIndex--;
        }
        document.getElementById(elementId).parentNode.removeChild(document.getElementById(elementId));
        this.activateTab(newTab[tabHighlightIndex].elementId);
        this.tabs = newTab;
        if (this.tabs.length == 1) {
            this.closable = false;
        }
        this.reAdjust();
    };
    /**
     * @return {?}
     */
    TabPaneComponent.prototype.widthOfList = function () {
        var /** @type {?} */ itemsWidth = 0;
        $('#list-' + this.elementId + ' li').each(function () {
            var /** @type {?} */ itemWidth = $(this).outerWidth();
            itemsWidth += itemWidth;
        });
        return itemsWidth;
    };
    /**
     * @return {?}
     */
    TabPaneComponent.prototype.rightClick = function () {
        this.navAdjust('left-' + this.elementId, 'block');
        var /** @type {?} */ ts = document.getElementById('wrapper-' + this.elementId);
        ts.scrollLeft += 200;
        if ((ts.scrollWidth - ts.offsetWidth - ts.scrollLeft) <= 0) {
            this.navAdjust('right-' + this.elementId, 'none');
        }
    };
    /**
     * @return {?}
     */
    TabPaneComponent.prototype.leftClick = function () {
        this.navAdjust('right-' + this.elementId, 'block');
        var /** @type {?} */ ts = document.getElementById('wrapper-' + this.elementId);
        ts.scrollLeft -= 200;
        if (ts.scrollLeft == 0) {
            this.navAdjust('left-' + this.elementId, 'none');
        }
    };
    /**
     * @return {?}
     */
    TabPaneComponent.prototype.reAdjust = function () {
        var /** @type {?} */ listWidth1 = Math.round(this.widthOfList()) + 1;
        var /** @type {?} */ listWidth = Math.round($('#' + this.elementId).outerWidth()) + 10;
        if (listWidth1 > listWidth) {
            listWidth = listWidth1;
            this.navAdjust('right-' + this.elementId, 'block');
        }
        else {
            this.navAdjust('right-' + this.elementId, 'none');
            this.navAdjust('left-' + this.elementId, 'none');
        }
        $('#list-' + this.elementId).css('minWidth', listWidth + 'px');
    };
    /**
     * @param {?} elementId
     * @param {?} display
     * @return {?}
     */
    TabPaneComponent.prototype.navAdjust = function (elementId, display) {
        $('#' + elementId).css('display', display);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TabPaneComponent.prototype.onResize = function (event) {
        this.reAdjust();
    };
    /**
     * @param {?} tab
     * @return {?}
     */
    TabPaneComponent.prototype.getTabClass = function (tab) {
        var /** @type {?} */ cls = 'nav-link ';
        if (tab.active && tab.active == true) {
            cls = cls + ' active';
        }
        if (tab.icon) {
            cls = cls + ' ' + tab.icon;
        }
        return cls;
    };
    /**
     * @param {?} tabId
     * @return {?}
     */
    TabPaneComponent.prototype.activateTab = function (tabId) {
        var /** @type {?} */ tabs = this.tabs;
        tabs.forEach(function (tab) {
            tab.active = false;
            if (tab.elementId == tabId) {
                tab.active = true;
            }
        });
    };
    return TabPaneComponent;
}());
TabPaneComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-tab-pane',
                template: "\n\n    <div [attr.id]=\"elementId\" (window:resize)=\"onResize($event)\">\n    <div (click)=\"leftClick()\" class=\"scroller scroller-left\" >\n      <span style=\"display: none;\"  [attr.id]=\"'left-'+elementId\"><i class=\"fa fa-caret-left fa-2x\" aria-hidden=\"true\"></i></span>\n    </div>\n    <div (click)=\"rightClick()\" class=\"scroller scroller-right\">\n      <span  style=\"display: block\"  [attr.id]=\"'right-'+elementId\"><i class=\"fa fa-caret-right fa-2x\" aria-hidden=\"true\"></i></span>\n    </div>\n    \n    <div class=\"wrapper\" [attr.id]=\"'wrapper-'+elementId\">\n      <ul class=\"nav nav-tabs\" role=\"tablist\" [attr.id]=\"'list-'+elementId\">\n        <li class=\"nav-item\" *ngFor=\"let tab of tabs\" >\n          <a [class]=\"getTabClass(tab)\" data-toggle=\"tab\"  role=\"tab\" [ngClass]=\"{'active':tab.active}\" style=\"cursor: pointer;\" (click)=\"activateTab(tab.elementId)\" [attr.id]=\"tab.elementId\" >&nbsp;{{tab.title}}&nbsp;&nbsp;<a *ngIf=\"closable\" id=\"'closable-'+{{tab.elementId}}\" style=\"vertical-align: top; cursor: pointer;\" (click)=\"closeTab(tab.elementId)\">&times;</a></a>\n        </li>\n      </ul>\n    </div>\n    </div>\n    \n    <div>\n      <ng-content ></ng-content>\n    </div>\n    \n  ",
                styles: [
                    "\n\n      .list {\n        position:absolute;\n        left:0px;\n        top:0px;\n        margin-left:12px;\n        margin-top:0px;\n      }\n\n      .list li{\n        display:table-cell;\n        position:relative;\n        text-align:center;\n        cursor:grab;\n        cursor:-webkit-grab;\n        color:#efefef;\n        vertical-align:middle;\n      }\n\n      .wrapper {\n        position:relative;\n        margin:0 auto;\n        overflow:hidden;\n        padding:5px;\n        height: 50px;\n      }\n\n      .scroller {\n        text-align:center;\n        cursor:pointer;\n        padding-top:15px;\n        vertical-align: top;\n      }\n\n      .scroller-right{\n        float:right;\n      }\n\n      .scroller-left {\n        float:left;\n      }      \n    \n    "
                ]
            },] },
];
/**
 * @nocollapse
 */
TabPaneComponent.ctorParameters = function () { return []; };
TabPaneComponent.propDecorators = {
    'closable': [{ type: Input },],
    'tapPosition': [{ type: Input },],
    'queryTabs': [{ type: ContentChildren, args: [TabComponent,] },],
};

/**
 * Created by ketangote on 7/17/17.
 */
var VerticalLeftTabPaneComponent = (function () {
    function VerticalLeftTabPaneComponent() {
        this.elementId = 'vertical-left-tabpane-' + new Date().getTime();
        this.verticalText = false;
        this.tabwidth = "15%";
    }
    /**
     * @return {?}
     */
    VerticalLeftTabPaneComponent.prototype.ngOnInit = function () {
        if (this.verticalText) {
            this.tapPosition = 'nav flex-column vertical-text';
        }
        else {
            this.tapPosition = 'nav flex-column';
        }
    };
    /**
     * @return {?}
     */
    VerticalLeftTabPaneComponent.prototype.ngAfterViewInit = function () {
    };
    /**
     * @return {?}
     */
    VerticalLeftTabPaneComponent.prototype.ngAfterContentInit = function () {
        this.tabs = this.queryTabs.toArray();
    };
    /**
     * @param {?} tabId
     * @return {?}
     */
    VerticalLeftTabPaneComponent.prototype.activateTab = function (tabId) {
        var /** @type {?} */ tabs = this.tabs;
        tabs.forEach(function (tab) {
            tab.active = false;
            if (tab.elementId == tabId)
                tab.active = true;
        });
    };
    return VerticalLeftTabPaneComponent;
}());
VerticalLeftTabPaneComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-vertical-left-tab-pane',
                template: "\n    <table>\n      <tr>\n        <td [attr.width]=\"tabwidth\" valign=\"top\">\n          <ul [ngClass]=\"tapPosition\">\n            <li *ngFor=\"let tab of tabs\" class=\"nav-item\">\n              <a (click)=\"activateTab(tab.elementId)\" [ngClass]=\"{'active':(tab.active && !verticalText), 'inactive':(!tab.active && !verticalText),'activevertical':(tab.active && verticalText), 'inactivevertical':(!tab.active && verticalText)}\" class=\"nav-link \" [attr.id]=\"tab.elementId\" style=\"cursor: pointer;\"> <i *ngIf=\"tab.icon\" [ngClass]=\"tab.icon\"></i>&nbsp;{{tab.title}}</a>\n            </li>\n          </ul>\n        </td>\n        <td valign=\"top\">\n          <div style=\"padding: 5px;\">\n            <ng-content ></ng-content>\n          </div>\n        </td>\n      </tr>\n    </table>\n\n    \n  ",
                styles: [
                    "\n\n      .active{\n        border-bottom: 1px solid #ddd;\n        border-top: 1px solid #ddd;\n        border-left: 1px solid #ddd;\n        border-right: none;\n        border-right-color: transparent;\n        display: block;\n      }\n\n      .inactive{\n        border-right: 1px solid #ddd;;\n      }\n\n      .activevertical{\n        border-left: 1px solid #ddd;\n        border-right: 1px solid #ddd;\n        border-top: 1px solid #ddd;\n      }\n\n      .inactivevertical{\n        border-bottom: 1px solid #ddd;\n      }\n      \n      .vertical-text {\n        margin-top:50px;\n        border: none;\n        position: relative;\n      }\n      .vertical-text>li {\n        height: 20px;\n        width: 120px;\n        margin-bottom: 100px;\n      }\n      .vertical-text>li>a {\n        text-align: center;\n        \n        -webkit-transform: rotate(-90deg);\n        -moz-transform: rotate(-90deg);\n        -ms-transform: rotate(-90deg);\n        -o-transform: rotate(-90deg);\n        transform: rotate(-90deg);        \n      }\n\n\n    "
                ]
            },] },
];
/**
 * @nocollapse
 */
VerticalLeftTabPaneComponent.ctorParameters = function () { return []; };
VerticalLeftTabPaneComponent.propDecorators = {
    'tabs': [{ type: Input },],
    'tapPosition': [{ type: Input },],
    'verticalText': [{ type: Input },],
    'tabwidth': [{ type: Input },],
    'queryTabs': [{ type: ContentChildren, args: [TabComponent,] },],
};

/**
 * Created by ketangote on 7/25/17.
 */
var VerticalRightTabPaneComponent = (function () {
    function VerticalRightTabPaneComponent() {
        this.elementId = 'vertical-right-tabpane-' + new Date().getTime();
        this.verticalText = false;
        this.tabwidth = "15%";
    }
    /**
     * @return {?}
     */
    VerticalRightTabPaneComponent.prototype.ngOnInit = function () {
        if (this.verticalText) {
            this.tapPosition = 'nav flex-column vertical-text';
        }
        else {
            this.tapPosition = 'nav flex-column';
        }
    };
    /**
     * @return {?}
     */
    VerticalRightTabPaneComponent.prototype.ngAfterViewInit = function () {
    };
    /**
     * @return {?}
     */
    VerticalRightTabPaneComponent.prototype.ngAfterContentInit = function () {
        this.tabs = this.queryTabs.toArray();
    };
    /**
     * @param {?} tabId
     * @return {?}
     */
    VerticalRightTabPaneComponent.prototype.activateTab = function (tabId) {
        var /** @type {?} */ tabs = this.tabs;
        tabs.forEach(function (tab) {
            tab.active = false;
            if (tab.elementId == tabId) {
                tab.active = true;
            }
        });
    };
    return VerticalRightTabPaneComponent;
}());
VerticalRightTabPaneComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-vertical-right-tab-pane',
                template: "\n    <table>\n      <tr>\n        <td valign=\"top\">\n          <div style=\"padding: 5px;\">\n            <ng-content ></ng-content>\n          </div>\n        </td>\n        <td [attr.width]=\"tabwidth\">\n          <ul [ngClass]=\"tapPosition\">\n            <li *ngFor=\"let tab of tabs\" class=\"nav-item\">\n              <a (click)=\"activateTab(tab.elementId)\" [ngClass]=\"{'active':(tab.active && !verticalText), 'inactive':(!tab.active && !verticalText),'activevertical':(tab.active && verticalText), 'inactivevertical':(!tab.active && verticalText)}\" class=\"nav-link \" [attr.id]=\"tab.elementId\" style=\"cursor: pointer;\"> <i *ngIf=\"tab.icon\" [ngClass]=\"tab.icon\"></i>&nbsp;{{tab.title}}</a>\n            </li>\n          </ul>\n        </td>\n      </tr>\n    </table>\n\n\n  ",
                styles: [
                    "\n\n      .active{\n        border-bottom: 1px solid #ddd;\n        border-top: 1px solid #ddd;\n        border-right: 1px solid #ddd;\n        border-left: none;\n        border-left-color: transparent;\n        display: block;\n      }\n\n      .inactive{\n        border-left: 1px solid #ddd;;\n      }\n\n      .activevertical{\n        border-left: 1px solid #ddd;\n        border-right: 1px solid #ddd;\n        border-bottom: 1px solid #ddd;\n      }\n\n      .inactivevertical{\n        border-top: 1px solid #ddd;\n      }\n\n      .vertical-text {\n        margin-top:50px;\n        border: none;\n        position: relative;\n      }\n      .vertical-text>li {\n        height: 20px;\n        width: 120px;\n        margin-bottom: 100px;\n      }\n      .vertical-text>li>a {\n        text-align: center;\n        -webkit-transform: rotate(-90deg);\n        -moz-transform: rotate(-90deg);\n        -ms-transform: rotate(-90deg);\n        -o-transform: rotate(-90deg);\n        transform: rotate(-90deg);\n      }\n\n\n\n    "
                ]
            },] },
];
/**
 * @nocollapse
 */
VerticalRightTabPaneComponent.ctorParameters = function () { return []; };
VerticalRightTabPaneComponent.propDecorators = {
    'tabs': [{ type: Input },],
    'tapPosition': [{ type: Input },],
    'verticalText': [{ type: Input },],
    'tabwidth': [{ type: Input },],
    'queryTabs': [{ type: ContentChildren, args: [TabComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var ColumnComponent = (function () {
    function ColumnComponent() {
    }
    return ColumnComponent;
}());
ColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-data-table-column',
                template: ""
            },] },
];
/**
 * @nocollapse
 */
ColumnComponent.ctorParameters = function () { return []; };
ColumnComponent.propDecorators = {
    'text': [{ type: Input },],
    'dataIndex': [{ type: Input },],
    'hidden': [{ type: Input },],
    'dataType': [{ type: Input },],
    'summaryType': [{ type: Input },],
    'summaryCaption': [{ type: Input },],
    'headerTemplate': [{ type: ContentChild, args: ['amexioHeaderTmpl',] },],
    'bodyTemplate': [{ type: ContentChild, args: ['amexioBodyTmpl',] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return DataTableComponent; }),
    multi: true
};
var DataTableComponent = (function () {
    /**
     * @param {?} dataTableSevice
     * @param {?} cd
     */
    function DataTableComponent(dataTableSevice, cd) {
        this.dataTableSevice = dataTableSevice;
        this.cd = cd;
        this.rowSelect = new EventEmitter();
        this.selectedRowData = new EventEmitter();
        this.groupByColumn = false;
        this.viewRows = [];
        this.pageNumbers = [];
        this.currentPage = 1;
        this.elementId = 'mytable-' + Math.random();
        this.selectAll = false;
        this.selectedRows = [];
        this.isSummary = false;
        this.summaryData = [];
        this.summary = [];
        this.smallScreen = false;
        this.sortBy = -1;
        this.randomIDCheckALL = 'checkall-' + new Date().getTime() + Math.random();
    }
    /**
     * @return {?}
     */
    DataTableComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (window.innerWidth < 768) {
            this.smallScreen = true;
        }
        else {
            this.smallScreen = false;
        }
        if (this.httpMethod && this.httpUrl) {
            this.dataTableSevice.fetchData(this.httpUrl, this.httpMethod).subscribe(function (response) {
                _this.responseData = response.json();
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        else if (this.dataTableBindData) {
            this.setData(this.dataTableBindData);
        }
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.ngAfterViewInit = function () {
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.setHeight = function () {
        var /** @type {?} */ height;
        if (this.height) {
            height = this.height + 'px';
        }
        var /** @type {?} */ tableHeight;
        tableHeight = {
            'height': height,
            'overflow-y': 'auto'
        };
        return tableHeight;
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.ngAfterContentInit = function () {
        this.createConfig();
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.createConfig = function () {
        this.columns = [];
        this.createColumnConfig();
        for (var /** @type {?} */ ir = 0; ir < this.columns.length; ir++) {
            var /** @type {?} */ column = this.columns[ir];
            if (column.summaryType && column.dataType && column.dataType === 'number') {
                this.isSummary = true;
            }
            this.summaryData.push(0);
            this.summary.push({ summaryType: column.summaryType, summaryCaption: column.summaryCaption, data: [] });
        }
        this.dropdownData = {
            'response': {
                'data': this.columns
            }
        };
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.createColumnConfig = function () {
        var /** @type {?} */ columnRefArray = [];
        columnRefArray = this.columnRef.toArray();
        for (var /** @type {?} */ cr = 0; cr < columnRefArray.length; cr++) {
            var /** @type {?} */ columnConfig = columnRefArray[cr];
            var /** @type {?} */ columnData = void 0;
            if (columnConfig.headerTemplate != null && columnConfig.bodyTemplate != null) {
                columnData = {
                    text: columnConfig.text,
                    dataIndex: columnConfig.dataIndex,
                    hidden: columnConfig.hidden,
                    dataType: columnConfig.dataType,
                    headerTemplate: columnConfig.headerTemplate,
                    bodyTemplate: columnConfig.bodyTemplate
                };
            }
            else if (columnConfig.headerTemplate != null && columnConfig.bodyTemplate == null) {
                columnData = {
                    text: columnConfig.text, dataIndex: columnConfig.dataIndex,
                    hidden: columnConfig.hidden, dataType: columnConfig.dataType,
                    headerTemplate: columnConfig.headerTemplate
                };
            }
            else if (columnConfig.bodyTemplate != null && columnConfig.headerTemplate == null) {
                columnData = {
                    text: columnConfig.text, dataIndex: columnConfig.dataIndex,
                    hidden: columnConfig.hidden, dataType: columnConfig.dataType,
                    bodyTemplate: columnConfig.bodyTemplate
                };
            }
            else if (columnConfig.bodyTemplate == null && columnConfig.headerTemplate == null) {
                columnData = {
                    text: columnConfig.text, dataIndex: columnConfig.dataIndex,
                    hidden: columnConfig.hidden, dataType: columnConfig.dataType
                };
            }
            if (columnConfig.summaryType) {
                columnData['summaryType'] = columnConfig.summaryType;
            }
            if (columnConfig.summaryCaption) {
                columnData['summaryCaption'] = columnConfig.summaryCaption;
            }
            this.columns.push(columnData);
        }
        /*------For column filtering icon switch--------*/
        this.columns.forEach(function (opt) {
            opt['filterIcon'] = false;
        });
    };
    /**
     * @param {?} change
     * @return {?}
     */
    DataTableComponent.prototype.ngOnChanges = function (change) {
        if (change['dataTableBindData']) {
            var /** @type {?} */ data = change['dataTableBindData'].currentValue;
            if (data) {
                this.setData(data);
            }
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    DataTableComponent.prototype.setData = function (httpResponse) {
        this.data = this.getResponseData(httpResponse);
        if (this.groupByColumn) {
            this.cloneData = JSON.parse(JSON.stringify(this.data));
        }
        if (this.filtering) {
            this.filterCloneData = JSON.parse(JSON.stringify(this.data));
        }
        if (this.data.length > (1 * this.pageSize)) {
            this.maxPage = Math.floor((this.data.length / this.pageSize));
            if ((this.data.length % this.pageSize) > 0) {
                this.maxPage++;
            }
        }
        for (var /** @type {?} */ pageNo = 1; pageNo <= this.maxPage; pageNo++) {
            this.pageNumbers.push(pageNo);
        }
        this.createSummaryData();
        this.renderData();
        if (this.groupByColumn) {
            this.setColumnData();
        }
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.createSummaryData = function () {
        for (var /** @type {?} */ sd = 0; sd < this.data.length; sd++) {
            var /** @type {?} */ localData = this.data[sd];
            if (this.isSummary) {
                for (var /** @type {?} */ ir = 0; ir < this.columns.length; ir++) {
                    var /** @type {?} */ column = this.columns[ir];
                    if (column.summaryType && column.dataType && column.dataType === 'number') {
                        var /** @type {?} */ colData = localData[column.dataIndex];
                        if (colData) {
                            var /** @type {?} */ summaryData = this.summary[ir];
                            if (summaryData && summaryData !== '') {
                                summaryData.data.push(colData);
                            }
                        }
                    }
                }
            }
        }
        for (var /** @type {?} */ is = 0; is < this.summaryData.length; is++) {
            if (this.summaryData[is] === 0) {
                this.summaryData[is] = '';
            }
            var /** @type {?} */ summarized = this.summary[is];
            if (summarized) {
                var /** @type {?} */ summaryType = summarized.summaryType;
                var /** @type {?} */ summarizeData = summarized.data.sort(function (a, b) { return a - b; });
                var /** @type {?} */ summaryCaption = summarized.summaryCaption;
                if (summaryType) {
                    if (summaryType === 'sum') {
                        var /** @type {?} */ sumValue = 0;
                        for (var /** @type {?} */ s = 0; s < summarizeData.length; s++) {
                            sumValue = sumValue + summarizeData[s];
                        }
                        this.summaryData[is] = summaryCaption + ' ' + sumValue;
                    }
                    else if (summaryType === 'min') {
                        if (summarizeData) {
                            this.summaryData[is] = summaryCaption + ' ' + summarizeData[0];
                        }
                    }
                    else if (summaryType === 'max') {
                        if (summarizeData) {
                            this.summaryData[is] = summaryCaption + ' ' + summarizeData[summarizeData.length - 1];
                        }
                    }
                    else if (summaryType === 'avg') {
                        if (summarizeData) {
                            var /** @type {?} */ sumValue = 0;
                            for (var /** @type {?} */ s = 0; s < summarizeData.length; s++) {
                                sumValue = sumValue + summarizeData[s];
                            }
                            this.summaryData[is] = summaryCaption + ' ' + Math.round(sumValue / summarizeData.length);
                        }
                    }
                }
            }
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    DataTableComponent.prototype.getResponseData = function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        var /** @type {?} */ dr = this.dataReader.split('.');
        for (var /** @type {?} */ ir = 0; ir < dr.length; ir++) {
            responsedata = responsedata[dr[ir]];
        }
        return responsedata;
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.renderData = function () {
        if (this.pageSize > 1) {
            var /** @type {?} */ rowsTemp = this.data;
            var /** @type {?} */ newRows = [];
            var /** @type {?} */ startIndex = 0;
            var /** @type {?} */ endIndex = this.pageSize;
            if (this.currentPage > 1) {
                startIndex = (this.currentPage - 1) * this.pageSize;
                endIndex = startIndex + this.pageSize;
            }
            while (startIndex <= endIndex) {
                if (rowsTemp[startIndex]) {
                    newRows.push(rowsTemp[startIndex]);
                }
                startIndex++;
            }
            this.viewRows = newRows;
        }
        else {
            this.viewRows = this.data;
        }
        this.selectedRowNo = -1;
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.sortData = function () {
        if (this.sortColumn) {
            var /** @type {?} */ sortColDataIndex_1;
            var /** @type {?} */ sortOrder_1 = this.sortBy;
            if (this.sortColumn.dataIndex && this.sortColumn.dataType) {
                var /** @type {?} */ dataIndex = this.sortColumn.dataIndex;
                sortColDataIndex_1 = dataIndex;
                if (this.sortColumn.dataType === 'string') {
                    if (this.groupByColumn) {
                        this.data.sort(function (a, b) {
                            var /** @type {?} */ x = a.group.toLowerCase();
                            var /** @type {?} */ y = b.group.toLowerCase();
                            if (sortOrder_1 === 2) {
                                if (x < y) {
                                    return 1;
                                }
                                if (x > y) {
                                    return -1;
                                }
                            }
                            else {
                                if (x < y) {
                                    return -1;
                                }
                                if (x > y) {
                                    return 1;
                                }
                            }
                            return 0;
                        });
                    }
                    else {
                        this.data.sort(function (a, b) {
                            var /** @type {?} */ x = a[sortColDataIndex_1].toLowerCase();
                            var /** @type {?} */ y = b[sortColDataIndex_1].toLowerCase();
                            if (sortOrder_1 === 2) {
                                if (x < y) {
                                    return 1;
                                }
                                if (x > y) {
                                    return -1;
                                }
                            }
                            else {
                                if (x < y) {
                                    return -1;
                                }
                                if (x > y) {
                                    return 1;
                                }
                            }
                            return 0;
                        });
                    }
                }
                else if (this.sortColumn.dataType === 'number') {
                    if (this.groupByColumn) {
                        this.data.sort(function (a, b) {
                            var /** @type {?} */ x = a.group;
                            var /** @type {?} */ y = b.group;
                            if (sortOrder_1 === 2) {
                                return y - x;
                            }
                            else {
                                return x - y;
                            }
                        });
                    }
                    else {
                        this.data.sort(function (a, b) {
                            var /** @type {?} */ x = a[sortColDataIndex_1];
                            var /** @type {?} */ y = b[sortColDataIndex_1];
                            if (sortOrder_1 === 2) {
                                return y - x;
                            }
                            else {
                                return x - y;
                            }
                        });
                    }
                }
            }
        }
        this.renderData();
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.next = function () {
        if (this.currentPage < this.maxPage) {
            this.currentPage++;
        }
        this.renderData();
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.prev = function () {
        if (this.currentPage > 1) {
            this.currentPage--;
        }
        else {
            this.currentPage = 1;
        }
        this.renderData();
    };
    /**
     * @param {?} sortCol
     * @return {?}
     */
    DataTableComponent.prototype.sortOnColHeaderClick = function (sortCol) {
        if (this.sortBy === -1) {
            this.sortBy = 1;
        }
        else if (this.sortBy === 1) {
            this.sortBy = 2;
        }
        else if (this.sortBy === 2) {
            this.sortBy = 1;
        }
        this.setSortColumn(sortCol, this.sortBy);
    };
    /**
     * @param {?} sortCol
     * @param {?} _sortBy
     * @return {?}
     */
    DataTableComponent.prototype.setSortColumn = function (sortCol, _sortBy) {
        this.sortBy = _sortBy;
        this.sortColumn = sortCol;
        this.sortData();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DataTableComponent.prototype.setPageNo = function (value) {
        this.currentPage = value;
        this.renderData();
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.setUserPageNo = function () {
        this.renderData();
    };
    /**
     * @param {?} rowData
     * @param {?} rowIndex
     * @return {?}
     */
    DataTableComponent.prototype.rowClick = function (rowData, rowIndex) {
        this.rowSelect.emit(rowData);
        this.selectedRowNo = rowIndex;
    };
    /**
     * @param {?} rowNo
     * @return {?}
     */
    DataTableComponent.prototype.isSelected = function (rowNo) {
        return rowNo === this.selectedRowNo;
    };
    /**
     * @param {?} dataIndex
     * @return {?}
     */
    DataTableComponent.prototype.setColumnVisiblity = function (dataIndex) {
        for (var /** @type {?} */ ic = 0; ic < this.columns.length; ic++) {
            var /** @type {?} */ col = this.columns[ic];
            if (col.dataIndex === dataIndex) {
                col.hidden = !col.hidden;
            }
        }
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.selectAllVisibleRows = function () {
        this.selectAll = !this.selectAll;
        if (this.selectAll) {
            for (var /** @type {?} */ vr = 0; vr < this.viewRows.length; vr++) {
                this.selectedRows.push(this.viewRows[vr]);
            }
        }
        else {
            this.selectedRows = [];
        }
        this.emitSelectedRows();
    };
    /**
     * @param {?} rowData
     * @param {?} event
     * @return {?}
     */
    DataTableComponent.prototype.setSelectedRow = function (rowData, event) {
        if (event.currentTarget.checked) {
            this.selectedRows.push(rowData);
        }
        else {
            var /** @type {?} */ indexOf = this.selectedRows.indexOf(rowData);
            delete this.selectedRows[indexOf];
        }
        this.emitSelectedRows();
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.emitSelectedRows = function () {
        var /** @type {?} */ sRows = [];
        for (var /** @type {?} */ sr = 0; sr < this.selectedRows.length; sr++) {
            if (this.selectedRows[sr]) {
                sRows.push(this.selectedRows[sr]);
            }
        }
        this.selectedRowData.emit(sRows);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DataTableComponent.prototype.onResize = function (event) {
        if (event.target.innerWidth < 768) {
            this.smallScreen = true;
        }
        else {
            this.smallScreen = false;
        }
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.setColumnData = function () {
        var _this = this;
        this.data = this.cloneData;
        var /** @type {?} */ groups = {};
        this.data.forEach(function (option) {
            var /** @type {?} */ groupName = option[_this.groupByColumnIndex];
            if (!groups[groupName]) {
                groups[groupName] = [];
            }
            groups[groupName].push(option);
        });
        this.data = [];
        for (var /** @type {?} */ groupName in groups) {
            this.data.push({ expanded: false, group: groupName, groupData: groups[groupName] });
        }
        /*-------Aggregation---------*/
        /* this.data.forEach((groupdata)=>{
         let aggregateValue :  number;
         let dummyA={};
         let k;
         let arrayIndex;
         this.columns.forEach((columnOption)=> {
         if(columnOption.aggregate==true) {
         k = columnOption.dataIndex;
         aggregateValue =0;
         groupdata.groupData.forEach((childData, index) => {
         aggregateValue = +(aggregateValue + Number(childData[columnOption.dataIndex]));
         arrayIndex = index;

         });
         dummyA[k]=aggregateValue;
         }

         });

         groupdata.groupData[arrayIndex+1]=dummyA;

         });*/
        this.renderData();
        this.cd.detectChanges();
    };
    /**
     * @param {?} groupData
     * @return {?}
     */
    DataTableComponent.prototype.iconSwitch = function (groupData) {
        groupData.expanded = !groupData.expanded;
    };
    /**
     * @param {?} filteredObj
     * @return {?}
     */
    DataTableComponent.prototype.getFilteredData = function (filteredObj) {
        var _this = this;
        var /** @type {?} */ status = false;
        if (filteredObj.length > 0) {
            this.data = [];
            this.filterCloneData.forEach(function (option) {
                status = _this.filterOpertion(option, filteredObj);
                if (status) {
                    _this.data.push(option);
                    status = false;
                }
            });
            if (this.data.length > (1 * this.pageSize)) {
                this.pagingRegenration();
                this.renderData();
            }
            else {
                this.viewRows = this.data;
                this.currentPage = 1;
                this.maxPage = 1;
                this.cd.detectChanges();
            }
        }
        else {
            this.data = this.filterCloneData;
            this.pagingRegenration();
            this.renderData();
        }
    };
    /**
     * @param {?} data
     * @param {?} filteredObj
     * @return {?}
     */
    DataTableComponent.prototype.filterOpertion = function (data, filteredObj) {
        var /** @type {?} */ statusArray = [];
        var /** @type {?} */ condition;
        filteredObj.forEach(function (filterOpt) {
            if (filterOpt.filter === '3') {
                if (filterOpt.type === 'string') {
                    condition = data[filterOpt.key].toLowerCase().includes(filterOpt.value.toLowerCase());
                }
                statusArray.push(condition);
            }
            if (filterOpt.filter === '1') {
                if (filterOpt.type === 'string') {
                    condition = data[filterOpt.key].toLowerCase().startsWith(filterOpt.value.toLowerCase());
                }
                statusArray.push(condition);
            }
            else if (filterOpt.filter === '2') {
                if (filterOpt.type === 'string') {
                    condition = data[filterOpt.key].toLowerCase().endsWith(filterOpt.value.toLowerCase());
                }
                statusArray.push(condition);
            }
            else if (filterOpt.filter === '<') {
                if (filterOpt.type === 'number') {
                    condition = data[filterOpt.key] > filterOpt.value;
                }
                statusArray.push(condition);
            }
            else if (filterOpt.filter === '>') {
                if (filterOpt.type === 'number') {
                    condition = data[filterOpt.key] < filterOpt.value;
                }
                statusArray.push(condition);
            }
            else if (filterOpt.filter === '>=') {
                if (filterOpt.type === 'number') {
                    condition = data[filterOpt.key] <= filterOpt.value;
                }
                statusArray.push(condition);
            }
            else if (filterOpt.filter === '=<') {
                if (filterOpt.type === 'number') {
                    condition = data[filterOpt.key] >= filterOpt.value;
                }
                statusArray.push(condition);
            }
            else if (filterOpt.filter === '==') {
                if (filterOpt.type === 'number') {
                    condition = data[filterOpt.key] === filterOpt.value;
                }
                else {
                    condition = data[filterOpt.key].toLowerCase() === filterOpt.value.toLowerCase();
                }
                statusArray.push(condition);
            }
            else if (filterOpt.filter === '!=') {
                if (filterOpt.type === 'number') {
                    condition = data[filterOpt.key] !== filterOpt.value;
                }
                else {
                    condition = data[filterOpt.key].toLowerCase() !== filterOpt.value.toLowerCase();
                }
                statusArray.push(condition);
            }
        });
        statusArray.forEach(function (opt) {
            if (opt === false) {
                condition = false;
            }
        });
        return condition;
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.pagingRegenration = function () {
        this.maxPage = Math.floor((this.data.length / this.pageSize));
        if ((this.data.length % this.pageSize) > 0) {
            this.maxPage++;
        }
        for (var /** @type {?} */ pageNo = 1; pageNo <= this.maxPage; pageNo++) {
            this.pageNumbers.push(pageNo);
        }
        this.cd.detectChanges();
    };
    return DataTableComponent;
}());
DataTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-data-table',
                template: "\n        <div>\n          <ng-content></ng-content>\n        </div>\n        <div class=\"wrap\">\n          <table class=\"table table-sm  table-bordered \" [attr.id]=\"elementId\" (window:resize)=\"onResize($event)\" style=\"width:100%\">\n            <tr>\n              <td [attr.colspan]=\"columns?.length + (checkboxSelect? 1: 0)\" width=\"100%\" data align=\"right\">\n        <span style=\"float: left;\">\n      <b>{{title}}</b>\n      </span>\n      <span style=\"float: right\" class=\"col-xs-12\">\n        <div class=\"btn-group btn-group-sm\" role=\"group\" aria-label=\"Button group with nested dropdown\">\n            <ng-container *ngIf=\"groupByColumn\">\n                   <amexio-dropdown [(ngModel)]=\"groupByColumnIndex\"\n                                    [placeholder]=\"'Choose Column'\"\n                                    name=\"groupByColumnIndex\"\n                                    [dataReader]=\"'response.data'\"\n                                    [data]=\"dropdownData\"\n                                    [displayField]=\"'text'\"\n                                    [valueField]=\"'dataIndex'\"\n                                    (onSingleSelect)=\"setColumnData()\">\n                   </amexio-dropdown>\n               </ng-container>\n          <button type=\"button\" class=\"btn btn-secondary\" aria-label=\"Previous\" (click)=\"prev()\"><span aria-hidden=\"true\">&laquo;</span></button>\n          <button type=\"button\" class=\"btn btn-secondary\">({{currentPage}} of {{maxPage}})</button>\n          <div class=\"input-group-btn\">\n            <button type=\"button\" class=\"btn btn-secondary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            <i class=\"fa fa-bars\"></i> Page - {{currentPage}}\n            </button>\n            <div class=\"dropdown-menu dropdown-menu-right\" style=\"max-height: 445.406px; overflow-y: auto; min-height: 0px;\">\n              <li *ngFor=\"let row of pageNumbers let pageNo = index \" class=\"dropdown-item\" value=\"{{pageNo+1}}\"><a (click)=\"setPageNo(pageNo+1)\">{{pageNo+1}}</a></li>\n            </div>\n          </div>\n          <div class=\"input-group-btn\">\n            <button type=\"button\" class=\"btn btn-secondary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            </button>\n            <div class=\"dropdown-menu dropdown-menu-right\">\n              <a class=\"dropdown-item\"><b> Show Columns</b></a>\n              <a class=\"dropdown-item\" *ngFor=\"let cols of columns;let i = index;\">\n              <label class=\"form-check-label\">\n              <input class=\"form-check-input\" type=\"checkbox\" (click)=\"setColumnVisiblity(cols.dataIndex)\" [attr.checked]=\"!cols.hidden ? true: null\"> {{cols.text +\" \"}}\n              </label>\n              </a>\n            </div>\n          </div>\n          <button type=\"button\" class=\"btn btn-secondary\" aria-label=\"Next\" (click)=\"next()\"><span aria-hidden=\"true\">&raquo;</span></button>\n        </div>\n      </span>\n              </td>\n            </tr>\n          </table>\n          <!--filtering changes-->\n          <table class=\"table table-sm\">\n            <tr *ngIf=\"filtering && !groupByColumn\">\n              <ng-container *ngIf=\"!smallScreen\">\n                <td *ngIf=\"checkboxSelect\" style=\"width: 10%;\"></td>\n                <td *ngFor=\"let cols of columns let index=index\" [hidden]=\"cols.hidden\">\n                  <amexio-filter-component [column]=\"cols\" (filterObject)=\"getFilteredData($event)\"></amexio-filter-component>\n                </td>\n              </ng-container>\n              <ng-container *ngIf=\"smallScreen\">\n                <td>\n                  <div style=\"word-wrap: break-word\" *ngFor=\"let cols of columns\" [hidden]=\"cols.hidden\">\n                    <amexio-filter-component [column]=\"cols\" (filterObject)=\"getFilteredData($event)\"></amexio-filter-component>\n                  </div>\n                </td>\n              </ng-container>\n            </tr>\n          </table>\n          <table class=\"table table-sm  table-hover  table-bordered \">\n            <tr *ngIf=\"!smallScreen\">\n              <td *ngIf=\"checkboxSelect\" style=\"width: 10%;\">\n                <input type=\"checkbox\" (click)=\"selectAllVisibleRows()\">\n              </td>\n              <td *ngFor=\"let cols of columns let index=index\" [hidden]=\"cols.hidden\">\n    <span style=\"cursor: pointer;\" (click)=\"sortOnColHeaderClick(cols)\">\n      <!-- If user hasnt embedded view -->\n      <ng-container *ngIf=\"!cols?.headerTemplate\"><b>{{cols.text}}</b></ng-container>\n      <!--Check if user has embedded view inserted then -->\n      <ng-template *ngIf=\"cols?.headerTemplate\" [ngTemplateOutlet]=\"cols?.headerTemplate\" [ngOutletContext]=\"{ $implicit: { header: cols.text } }\"></ng-template>\n    </span>\n                <span style=\"float: right\" class=\"btn-group\" role=\"group\">\n      <span class=\"dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n      <span class=\"glyphicon glyphicon-triangle-bottom\" style=\"color:#93a1a1\"></span>\n      </span>\n      <div class=\"dropdown-menu\">\n        <button class=\"btn btn-link\" (click)=\"setSortColumn(cols,1)\">\n        <span class=\"glyphicon glyphicon glyphicon-sort-by-attributes pull-left\"></span><span>&nbsp;Sort Ascending</span>\n        </button>\n        <button class=\"btn btn-link\" (click)=\"setSortColumn(cols,2)\">\n        <span class=\"glyphicon glyphicon glyphicon glyphicon-sort-by-attributes-alt pull-left\"></span><span>&nbsp;Sort Descending</span>\n        </button>\n      </div>\n    </span>\n              </td>\n            </tr>\n          </table>\n          <div [ngStyle]=\"setHeight()\">\n            <table class=\"table table-sm   table-bordered \">\n              <tbody *ngIf=\"!smallScreen\">\n              <ng-container *ngIf=\"groupByColumn\">\n                <tr [ngClass]=\"{'hiderow' : !(viewRows?.length > 0),'showrow' : viewRows?.length > 0}\">\n                  <td [attr.colspan]=\"columns?.length + (checkboxSelect? 1: 0)\" width=\"100%\">\n                    <div class=\"list-group\" *ngFor=\"let row of viewRows;let i=index;\" style=\"border-bottom: 1px ridge lightgray;\">\n              <span (click)=\"iconSwitch(row)\" style=\"cursor: pointer;color: black;\" data-toggle=\"collapse\" [attr.data-target]=\"'#'+i\" data-parent=\"#menu\">\n              <span [ngClass]=\"{'fa-caret-down':row.expanded,'fa-caret-right':!row.expanded}\" class=\"fa \" > &nbsp;&nbsp;</span>{{row.group}} <span class=\"badge badge-pill badge-default\" style=\"float: right\">{{row.groupData?.length}}</span>\n              </span>\n                      <div [attr.id]=\"i\" class=\"sublinks collapse\">\n                        <table class=\"table table-striped table-hover table-bordered\">\n                          <tbody>\n                          <tr *ngFor=\"let rows of row.groupData let rowIndex = index\" (click)=\"rowClick(rows, rowIndex)\">\n                            <td *ngIf=\"checkboxSelect\" style=\"width: 10%\">\n                              <input type=\"checkbox\" id=\"checkbox-{{elementId}}-{{rowIndex}}\" [attr.checked]=\"selectAll? true: null\" (click)=\"setSelectedRow(rows, $event)\">\n                            </td>\n                            <td *ngFor=\"let cols of columns\" [hidden]=\"cols.hidden\">\n                              <!-- If user hasnt specified customized cell use default -->\n                              <ng-container *ngIf=\"!cols?.bodyTemplate\">{{rows[cols.dataIndex]}}</ng-container>\n                              <!-- else insert customized code -->\n                              <ng-template *ngIf=\"cols.bodyTemplate\" [ngTemplateOutlet]=\"cols.bodyTemplate\" [ngOutletContext]=\"{ $implicit: { text : rows[cols.dataIndex] }, row: rows }\"></ng-template>\n                            </td>\n                          </tr>\n                          </tbody>\n                        </table>\n                      </div>\n                    </div>\n                  </td>\n                </tr>\n                <tr *ngIf=\"viewRows?.length == 0\">\n                  <td [attr.colspan]=\"columns?.length+1\" style=\"height: 100px;\" class=\"loading-mask\">\n                  </td>\n                </tr>\n              </ng-container>\n              <ng-container *ngIf=\"!groupByColumn\">\n                <tr *ngIf=\"viewRows?.length==0\">\n                  <td style=\"width: 100%\">\n                    <span>No Records Found</span>\n                  </td>\n                </tr>\n                <tr [ngClass]=\"{'hiderow' : !(viewRows?.length > 0),'showrow' : viewRows?.length > 0}\" style=\"cursor: pointer;\" *ngFor=\"let row of viewRows let rowIndex = index \" (click)=\"rowClick(row, rowIndex)\" [class.info]=\"isSelected(rowIndex)\">\n                  <td *ngIf=\"checkboxSelect\" style=\"width: 10%\">\n                    <input type=\"checkbox\" id=\"checkbox-{{elementId}}-{{rowIndex}}\" [attr.checked]=\"selectAll? true: null\" (click)=\"setSelectedRow(row, $event)\">\n                  </td>\n                  <td *ngFor=\"let cols of columns let index=index\" [hidden]=\"cols.hidden\">\n                    <!-- If user hasnt specified customized cell use default -->\n                    <ng-container *ngIf=\"!cols?.bodyTemplate\">{{row[cols.dataIndex]}}</ng-container>\n                    <!-- else insert customized code -->\n                    <ng-template *ngIf=\"cols.bodyTemplate\" [ngTemplateOutlet]=\"cols.bodyTemplate\" [ngOutletContext]=\"{ $implicit: { text : row[cols.dataIndex] }, row: row }\"></ng-template>\n                  </td>\n                </tr>\n                <tr *ngIf=\"viewRows?.length == 0\">\n                  <td [attr.colspan]=\"columns?.length+1\" style=\"height: 100px;\" class=\"loading-mask\">\n                  </td>\n                </tr>\n              </ng-container>\n              </tbody>\n              <tbody *ngIf=\"smallScreen\">\n              <ng-container *ngIf=\"groupByColumn\">\n                <tr [ngClass]=\"{'hiderow' : !(viewRows?.length > 0),'showrow' : viewRows?.length > 0}\">\n                  <td [attr.colspan]=\"columns?.length + (checkboxSelect? 1: 0)\" width=\"100%\">\n                    <div class=\"list-group\" *ngFor=\"let row of viewRows;let i=index;\" style=\"border-bottom: 1px ridge lightgray;\">\n              <span (click)=\"iconSwitch(row)\" style=\"cursor: pointer;color: black;\" data-toggle=\"collapse\" [attr.data-target]=\"'#'+i\" data-parent=\"#menu\">\n              <span [ngClass]=\"{'fa-caret-down':row.expanded,'fa-caret-right':!row.expanded}\" class=\"fa \" > &nbsp;&nbsp;</span>{{row.group}}<span style=\"float: right\" class=\"badge\">{{row.groupData?.length}}</span>\n              </span>\n                      <div [attr.id]=\"i\" class=\"sublinks collapse\">\n                        <table class=\"table table-bordered\">\n                          <tbody>\n                          <tr *ngFor=\"let rows of row.groupData let rowIndex = index\" (click)=\"rowClick(rows, rowIndex)\">\n                            <td *ngIf=\"checkboxSelect\" style=\"width: 10%\">\n                              <input type=\"checkbox\" id=\"checkbox-{{elementId}}-{{rowIndex}}\" [attr.checked]=\"selectAll? true: null\" (click)=\"setSelectedRow(rows, $event)\">\n                            </td>\n                            <td [attr.colspan]=\"columns?.length-1\">\n                              <div style=\"word-wrap: break-word\" *ngFor=\"let cols of columns\" [hidden]=\"cols.hidden\">\n                                <b>{{cols.text}}</b> :\n                                <!-- If user hasnt specified customized cell use default -->\n                                <ng-container *ngIf=\"!cols?.bodyTemplate\">{{rows[cols.dataIndex]}}</ng-container>\n                                <!-- else insert customized code -->\n                                <ng-template *ngIf=\"cols.bodyTemplate\" [ngTemplateOutlet]=\"cols.bodyTemplate\" [ngOutletContext]=\"{ $implicit: { text : rows[cols.dataIndex] }, row: rows }\"></ng-template>\n                              </div>\n                            </td>\n                          </tr>\n                          </tbody>\n                        </table>\n                      </div>\n                    </div>\n                  </td>\n                </tr>\n              </ng-container>\n              <ng-container *ngIf=\"!groupByColumn\">\n                <tr *ngIf=\"viewRows?.length==0\">\n                  <td style=\"width: 100%\">\n                    <span>No Records Found</span>\n                  </td>\n                </tr>\n                <tr [ngClass]=\"{'hiderow' : !(viewRows?.length > 0),'showrow' : viewRows?.length > 0}\" style=\"cursor: pointer\" *ngFor=\"let row of viewRows let rowIndex = index \" (click)=\"rowClick(row, rowIndex)\" [class.info]=\"isSelected(rowIndex)\">\n                  <td *ngIf=\"checkboxSelect\" style=\"width: 10%\">\n                    <input type=\"checkbox\" id=\"checkbox-{{elementId}}-{{rowIndex}}\" [attr.checked]=\"selectAll? true: null\" (click)=\"setSelectedRow(row, $event)\">\n                  </td>\n                  <td>\n                    <div style=\"word-wrap: break-word\" *ngFor=\"let cols of columns\" [hidden]=\"cols.hidden\">\n                      <b>{{cols.text}}</b> :\n                      <!-- If user hasnt specified customized cell use default -->\n                      <ng-container *ngIf=\"!cols?.bodyTemplate\">{{row[cols.dataIndex]}}</ng-container>\n                      <!-- else insert customized code -->\n                      <ng-template *ngIf=\"cols.bodyTemplate\" [ngTemplateOutlet]=\"cols.bodyTemplate\" [ngOutletContext]=\"{ $implicit: { text : row[cols.dataIndex] }, row: row }\"></ng-template>\n                    </div>\n                  </td>\n                </tr>\n              </ng-container>\n              <tr *ngIf=\"viewRows?.length == 0\">\n                <td [attr.colspan]=\"columns?.length+1\" style=\"height: 100px;\" class=\"loading-mask\">\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n    ",
                providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR, CommonHttpService],
                styles: ["\n        .wrap {\n            width: 100%;\n        }\n\n        .wrap table {\n            width: 100%;\n            table-layout: fixed;\n            margin-bottom: 1px;\n        }\n\n        table tr td {\n            border: 1px solid #eee;\n            width: 90%;\n            word-wrap: break-word;\n        }\n\n        table.head tr td {\n            background: #eee;\n        }\n\n    "]
            },] },
];
/**
 * @nocollapse
 */
DataTableComponent.ctorParameters = function () { return [
    { type: CommonHttpService, },
    { type: ChangeDetectorRef, },
]; };
DataTableComponent.propDecorators = {
    'title': [{ type: Input },],
    'pageSize': [{ type: Input },],
    'httpUrl': [{ type: Input },],
    'httpMethod': [{ type: Input },],
    'dataReader': [{ type: Input },],
    'checkboxSelect': [{ type: Input },],
    'dataTableBindData': [{ type: Input },],
    'rowSelect': [{ type: Output },],
    'selectedRowData': [{ type: Output },],
    'height': [{ type: Input },],
    'width': [{ type: Input },],
    'groupByColumn': [{ type: Input },],
    'groupByColumnIndex': [{ type: Input },],
    'filtering': [{ type: Input },],
    'columnRef': [{ type: ContentChildren, args: [ColumnComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author -  Dattaram Gawas
 *
 */
var FilterComponent = (function () {
    /**
     * @param {?} dataTableService
     */
    function FilterComponent(dataTableService) {
        this.dataTableService = dataTableService;
        this.filterObject = new EventEmitter();
        this.filterOptions = [
            {
                'key': 'Is Equal To',
                'value': '==',
                'type': 'string',
                'checkedStatus': ''
            },
            {
                'key': 'Is Not Equal To',
                'value': '!=',
                'type': 'string',
                'checkedStatus': ''
            },
            {
                'key': 'Start With',
                'value': '1',
                'type': 'string',
                'checkedStatus': 'fa fa-check'
            },
            {
                'key': 'Ends With',
                'value': '2',
                'type': 'string',
                'checkedStatus': ''
            },
            {
                'key': 'Contains',
                'value': '3',
                'type': 'string',
                'checkedStatus': ''
            },
            {
                'key': 'Is Equal To',
                'value': '==',
                'type': 'number',
                'checkedStatus': ''
            },
            {
                'key': 'Is Not Equal To',
                'value': '!=',
                'type': 'number',
                'checkedStatus': ''
            },
            {
                'key': 'Is greater Than',
                'value': '<',
                'type': 'number',
                'checkedStatus': ''
            },
            {
                'key': 'Is less Than',
                'value': '>',
                'type': 'number',
                'checkedStatus': ''
            },
            {
                'key': 'Is less Than or equal to',
                'value': '>=',
                'type': 'number',
                'checkedStatus': ''
            },
            {
                'key': 'Is greater Than or equal to',
                'value': '=<',
                'type': 'number',
                'checkedStatus': 'fa fa-check'
            }
        ];
    }
    /**
     * @return {?}
     */
    FilterComponent.prototype.ngOnInit = function () {
    };
    /**
     * @param {?} col
     * @param {?} opt
     * @return {?}
     */
    FilterComponent.prototype.selectedOption = function (col, opt) {
        this.checkStatus();
        var /** @type {?} */ filter = {};
        opt.checkedStatus = 'fa fa-check';
        filter['key'] = col.dataIndex;
        filter['value'] = this.filterValue;
        filter['filter'] = opt.value;
        filter['type'] = col.dataType;
        if (this.filterValue) {
            col.filterIcon = true;
            this.filterDataObject(filter, col);
        }
    };
    /**
     * @param {?} col
     * @return {?}
     */
    FilterComponent.prototype.keyUpSearch = function (col) {
        if (this.filterValue == null || this.filterValue === '') {
            this.removeFilter(col);
        }
        else {
            col.filterIcon = true;
            var /** @type {?} */ filter_1 = {};
            filter_1['key'] = col.dataIndex;
            filter_1['value'] = this.filterValue;
            filter_1['type'] = col.dataType;
            this.filterOptions.forEach(function (opt) {
                if (opt.checkedStatus === 'fa fa-check') {
                    if (col.dataType === opt.type) {
                        filter_1['filter'] = opt.value;
                    }
                }
            });
            this.filterDataObject(filter_1, col);
        }
    };
    /**
     * @param {?} column
     * @return {?}
     */
    FilterComponent.prototype.removeFilter = function (column) {
        var _this = this;
        this.filterValue = '';
        column.filterIcon = false;
        $('#' + column.dataIndex).val('');
        this.dataTableService.filteredObject.forEach(function (option, index) {
            if (option.key === column.dataIndex) {
                _this.dataTableService.filteredObject.splice(index, 1);
            }
        });
        this.filterObject.emit(this.dataTableService.filteredObject);
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.checkStatus = function () {
        this.filterOptions.forEach(function (opt) {
            opt.checkedStatus = '';
        });
    };
    /**
     * @param {?} filter
     * @param {?} col
     * @return {?}
     */
    FilterComponent.prototype.filterDataObject = function (filter, col) {
        var _this = this;
        this.dataTableService.filteredObject.forEach(function (option, index) {
            if (option.key == col.dataIndex) {
                _this.dataTableService.filteredObject.splice(index, 1);
            }
        });
        this.dataTableService.filteredObject.push(filter);
        this.filterObject.emit(this.dataTableService.filteredObject);
    };
    return FilterComponent;
}());
FilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-filter-component',
                template: "\n        <div class=\"col-lg-12 col-xs-12\">\n            <div class=\"row\">\n                <ng-container *ngIf=\"column.dataType==='string'\">\n                    <div class=\"input-group input-group-sm\">\n                        <input [attr.id]=\"column.dataIndex\" [(ngModel)]=\"filterValue\" [attr.placeholder]=\"column.text\" (keyup)=\"keyUpSearch(column)\" type=\"text\" class=\"form-control\" aria-label=\"Text input with dropdown button\">\n                        <div class=\"input-group-btn\">\n                            <button type=\"button\" class=\"btn btn-secondary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                <i class=\"fa fa-filter\" aria-hidden=\"true\"></i>\n                            </button>\n                            <div class=\"dropdown-menu \">\n\n                                <ng-container *ngFor=\"let opt of filterOptions\">\n                                    <ng-container *ngIf=\"opt.type===column.dataType\">\n                                        <a class=\"dropdown-item\" (click)=\"selectedOption(column,opt)\" >{{opt.key}}&nbsp;<i [class]=\"opt.checkedStatus\" aria-hidden=\"true\"></i></a>\n                                    </ng-container>\n                                </ng-container>\n                            </div>\n                        </div>\n                        <span class=\"input-group-btn\">\n                      <button *ngIf=\"column.filterIcon\" class=\"btn btn-secondary\" type=\"button\" (click)=\"removeFilter(column)\"><i class=\"fa fa-times\" aria-hidden=\"true\"></i></button>\n                    </span>\n                    </div>\n                </ng-container>\n                <ng-container *ngIf=\"column.dataType==='number'\">\n                    <div class=\"input-group input-group-sm\">\n                        <input [attr.id]=\"column.dataIndex\" [(ngModel)]=\"filterValue\" [attr.placeholder]=\"column.text\" (keyup)=\"keyUpSearch(column)\" type=\"number\" class=\"form-control\" aria-label=\"Text input with dropdown button\">\n                        <div class=\"input-group-btn\">\n                            <button type=\"button\" class=\"btn btn-secondary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                <i class=\"fa fa-filter\" aria-hidden=\"true\"></i>\n                            </button>\n                            <div class=\"dropdown-menu \">\n                                <ng-container *ngFor=\"let opt of filterOptions\">\n                                    <ng-container *ngIf=\"opt.type===column.dataType\">\n                                        <a class=\"dropdown-item\" (click)=\"selectedOption(column,opt)\" >{{opt.key}}&nbsp;<i [class]=\"opt.checkedStatus\" aria-hidden=\"true\"></i></a>\n                                    </ng-container>\n                                </ng-container>\n                            </div>\n                        </div>\n                        <span class=\"input-group-btn\">\n                      <button *ngIf=\"column.filterIcon\" class=\"btn btn-secondary\" type=\"button\" (click)=\"removeFilter(column)\"><i class=\"fa fa-times\" aria-hidden=\"true\"></i></button>\n                    </span>\n                    </div>\n                </ng-container>\n            </div>\n        </div>\n    ",
            },] },
];
/**
 * @nocollapse
 */
FilterComponent.ctorParameters = function () { return [
    { type: CommonHttpService, },
]; };
FilterComponent.propDecorators = {
    'column': [{ type: Input },],
    'filterObject': [{ type: Output },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var CarouselComponent = (function () {
    /**
     * @param {?} carouselService
     */
    function CarouselComponent(carouselService) {
        this.carouselService = carouselService;
        this.isContent = false;
        this.elementId = 'scroll' + Math.round(Math.random() * 200);
        this.className = 'carousel slide';
    }
    /**
     * @return {?}
     */
    CarouselComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.httpMethod && this.httpUrl) {
            this.carouselService.fetchData(this.httpUrl, this.httpMethod).subscribe(function (response) {
                _this.response = response.json();
            }, function (error) {
            }, function () {
                _this.setData(_this.response);
            });
        }
        else if (this.scrollViewBindData) {
            this.setData(this.scrollViewBindData);
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    CarouselComponent.prototype.setData = function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        var /** @type {?} */ dr = this.dataReader.split('.');
        for (var /** @type {?} */ ir = 0; ir < dr.length; ir++) {
            responsedata = responsedata[dr[ir]];
        }
        this.viewData = responsedata;
    };
    return CarouselComponent;
}());
CarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-carousel',
                template: "      \n        <div [attr.id]=\"elementId\" [attr.class]=\"className\" data-ride=\"carousel\">\n          <ol class=\"carousel-indicators\">\n            <li *ngFor=\"let scroll of viewData;let i =index\"  [attr.data-target]=\"'#'+elementId\" [attr.data-slide-to]=\"i\" class=\"\" [ngClass]=\"{'active':scroll.active}\"></li>\n          </ol>\n          <div class=\"carousel-inner\" role=\"listbox\">\n            <div class=\"carousel-item\" [ngClass]=\"{'active':scrollData.active}\"  *ngFor=\"let scrollData of viewData\">\n              <ng-container *ngIf=\"isContent\">\n                <div [innerHTML]=\"scrollData.content\"></div>\n              </ng-container>\n              <ng-container *ngIf=\"!isContent\">\n                <img class=\"d-block img-fluid\" [src]=\"scrollData.img\" alt=\"First slide\" style=\"width: 100%\">\n                <div class=\"carousel-caption  d-md-block\">\n                  <h3>{{scrollData.title}}</h3>\n                  <p>{{scrollData.caption}}</p>\n                </div>\n              </ng-container>\n            </div>\n          </div>\n          <a class=\"carousel-control-prev\" [attr.href]=\"'#'+elementId\" role=\"button\" data-slide=\"prev\">\n            <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n            <span class=\"sr-only\">Previous</span>\n          </a>\n          <a class=\"carousel-control-next\" [attr.href]=\"'#'+elementId\" role=\"button\" data-slide=\"next\">\n            <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </div>\n    ",
                providers: [CommonHttpService]
            },] },
];
/**
 * @nocollapse
 */
CarouselComponent.ctorParameters = function () { return [
    { type: CommonHttpService, },
]; };
CarouselComponent.propDecorators = {
    'httpUrl': [{ type: Input },],
    'httpMethod': [{ type: Input },],
    'dataReader': [{ type: Input },],
    'scrollViewBindData': [{ type: Input },],
    'isContent': [{ type: Input },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author -  Dattaram Gawas
 *
 */
var ItemSelectorComponent = (function () {
    /**
     * @param {?} itemSelectorService
     */
    function ItemSelectorComponent(itemSelectorService) {
        this.itemSelectorService = itemSelectorService;
        this.availableRecords = new EventEmitter();
        this.selectedRecords = new EventEmitter();
        this.selectedData = [];
    }
    /**
     * @return {?}
     */
    ItemSelectorComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.height && this.height >= 300) {
            this.itemSelectorHeight = this.height + 'px';
        }
        else {
            this.itemSelectorHeight = 300 + 'px';
        }
        if (window.innerWidth < 768) {
            this.itemSelectorWidth = 100 + '%';
            this.smallScreen = true;
        }
        else {
            this.smallScreen = false;
            this.itemSelectorWidth = 46 + '%';
        }
        if (this.httpMethod && this.httpUrl) {
            this.itemSelectorService.fetchData(this.httpUrl, this.httpMethod).subscribe(function (response) {
                _this.response = response.json();
            }, function (error) {
            }, function () {
                _this.setData(_this.response);
            });
        }
        else if (this.ItemSelectBindData) {
            this.setData(this.ItemSelectBindData);
        }
    };
    /**
     * @return {?}
     */
    ItemSelectorComponent.prototype.ngAfterViewInit = function () {
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    ItemSelectorComponent.prototype.setData = function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        var /** @type {?} */ dr = this.dataReader.split('.');
        for (var /** @type {?} */ ir = 0; ir < dr.length; ir++) {
            responsedata = responsedata[dr[ir]];
        }
        responsedata.forEach(function (option, index) {
            option['isSelected'] = false;
        });
        this.availableData = responsedata;
    };
    /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    ItemSelectorComponent.prototype.itemCkick = function (data, index) {
        this.switchingObject = data;
        this.objectIndex = index;
    };
    /**
     * @return {?}
     */
    ItemSelectorComponent.prototype.rightSwitch = function () {
        var _this = this;
        if (this.switchingObject != null) {
            if (!this.switchingObject.isSelected) {
                this.selectedData.push(this.switchingObject);
                this.switchingObject.isSelected = true;
                this.availableData.forEach(function (option, index) {
                    if (option.isSelected) {
                        _this.availableData.splice(index, 1);
                    }
                });
                this.switchingObject = null;
                this.dataEmitter();
            }
        }
    };
    /**
     * @return {?}
     */
    ItemSelectorComponent.prototype.leftSwitch = function () {
        var _this = this;
        if (this.switchingObject != null) {
            if (this.switchingObject.isSelected) {
                this.availableData.push(this.switchingObject);
                this.switchingObject.isSelected = false;
                this.selectedData.forEach(function (option, index) {
                    if (!option.isSelected) {
                        _this.selectedData.splice(index, 1);
                    }
                });
                this.switchingObject = null;
                this.dataEmitter();
            }
        }
    };
    /**
     * @return {?}
     */
    ItemSelectorComponent.prototype.upSwitch = function () {
        if (this.switchingObject != null) {
            if (this.switchingObject.isSelected) {
                var /** @type {?} */ index = this.selectedData[this.objectIndex];
                this.selectedData[this.objectIndex] = this.selectedData[this.objectIndex - 1];
                this.selectedData[this.objectIndex - 1] = index;
                this.switchingObject = null;
                this.dataEmitter();
            }
        }
    };
    /**
     * @return {?}
     */
    ItemSelectorComponent.prototype.downSwitch = function () {
        if (this.switchingObject != null) {
            if (this.switchingObject.isSelected) {
                if (this.selectedData.length - 1 !== this.objectIndex) {
                    var /** @type {?} */ index = this.selectedData[this.objectIndex];
                    this.selectedData[this.objectIndex] = this.selectedData[this.objectIndex + 1];
                    this.selectedData[this.objectIndex + 1] = index;
                    this.switchingObject = null;
                    this.dataEmitter();
                }
            }
        }
    };
    /**
     * @return {?}
     */
    ItemSelectorComponent.prototype.moveTop = function () {
        var /** @type {?} */ tempArray = [];
        if (this.switchingObject != null && this.switchingObject.isSelected) {
            if (this.selectedData.length > 1) {
                tempArray[0] = this.selectedData[this.objectIndex];
                this.selectedData.splice(this.objectIndex, 1);
                this.selectedData.forEach(function (option) {
                    tempArray.push(option);
                });
                this.selectedData = tempArray;
                this.switchingObject = null;
                this.dataEmitter();
            }
        }
    };
    /**
     * @return {?}
     */
    ItemSelectorComponent.prototype.moveDown = function () {
        if (this.switchingObject != null) {
            if (this.switchingObject.isSelected && this.selectedData.length > 1) {
                this.selectedData.splice(this.objectIndex, 1);
                this.selectedData[this.selectedData.length] = this.switchingObject;
            }
        }
        this.switchingObject = null;
        this.dataEmitter();
    };
    /**
     * @return {?}
     */
    ItemSelectorComponent.prototype.dataEmitter = function () {
        this.availableRecords.emit(this.availableData);
        this.selectedRecords.emit(this.selectedData);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ItemSelectorComponent.prototype.onResize = function (event) {
        if (event.target.innerWidth < 768) {
            this.itemSelectorWidth = 100 + '%';
            this.smallScreen = true;
        }
        else {
            this.smallScreen = false;
            this.itemSelectorWidth = 46 + '%';
        }
    };
    return ItemSelectorComponent;
}());
ItemSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-item-selector',
                template: "\n    \n    <div class=\"row\" style=\"width: 100%; overflow: hidden\" (window:resize)=\"onResize($event)\">\n    <div  [style.width]=\"itemSelectorWidth\">\n      <div class=\"list-group\" [style.height]=\"itemSelectorHeight\">\n        <button type=\"button\" class=\"list-group-item\" style=\"background-color:#cecece\">Available</button>\n        <div style=\"height:100%;overflow-y: auto;position:relative;\" >\n          <button type=\"button\" class=\"list-group-item list-group-item-action\"  *ngFor=\"let data of availableData; let i = index\" (click)=\"itemCkick(data,i)\">{{data[displayField]}}</button>\n        </div>\n       \n      </div>\n    </div>\n      <ng-container *ngIf=\"smallScreen\">\n        <div style=\"width: 100%\">\n          <div style=\"padding:5% 0 5% 0;\" class=\"btn-group\" role=\"group\"  aria-label=\"Button group with nested dropdown\">\n            <amexio-btn (onClick)=\"moveTop()\"  [type]=\"'link'\" [tooltipMessage]=\"'move top'\" [block]=\"true\" [icon]=\"'caret-up fa-2x'\"></amexio-btn>\n            <amexio-btn (onClick)=\"upSwitch()\" [type]=\"'link'\" [tooltipMessage]=\"'move up'\" [block]=\"true\" [icon]=\"'angle-double-up fa-2x'\"></amexio-btn>\n            <amexio-btn (onClick)=\"leftSwitch()\" [type]=\"'link'\" [tooltipMessage]=\"'move left'\" [block]=\"true\" [icon]=\"'arrow-up fa-2x'\"></amexio-btn>\n            <amexio-btn (onClick)=\"rightSwitch()\" [type]=\"'link'\" [tooltipMessage]=\"'move right'\" [block]=\"true\" [icon]=\"'arrow-down fa-2x'\"></amexio-btn>\n            <amexio-btn (onClick)=\"downSwitch()\" [type]=\"'link'\" [tooltipMessage]=\"'move down'\" [block]=\"true\" [icon]=\"'angle-double-down fa-2x'\"></amexio-btn>\n            <amexio-btn (onClick)=\"moveDown()\" [type]=\"'link'\" [tooltipMessage]=\"'bottom'\" [block]=\"true\" [icon]=\"'caret-down fa-2x'\"></amexio-btn>\n          </div>\n        </div>\n        \n      </ng-container>\n    <div style=\"width: 8%\" *ngIf=\"!smallScreen\">\n      <div class=\"list-group text-center\" style=\"padding-top: 35%;\" [style.height]=\"itemSelectorHeight\">\n        <div>  \n        <div class=\"btn-group-vertical\" role=\"group\" aria-label=\"Button group with nested dropdown\">\n            <amexio-btn (onClick)=\"moveTop()\"  [type]=\"'link'\" [tooltipMessage]=\"'move top'\" [block]=\"true\" [icon]=\"'caret-up fa-2x'\"></amexio-btn>\n            <amexio-btn (onClick)=\"upSwitch()\" [type]=\"'link'\" [tooltipMessage]=\"'move up'\" [block]=\"true\" [icon]=\"'arrow-up'\"></amexio-btn>\n            <amexio-btn (onClick)=\"leftSwitch()\" [type]=\"'link'\" [tooltipMessage]=\"'move left'\" [block]=\"true\" [icon]=\"'arrow-left'\"></amexio-btn>\n            <amexio-btn (onClick)=\"rightSwitch()\" [type]=\"'link'\" [tooltipMessage]=\"'move right'\" [block]=\"true\" [icon]=\"'arrow-right'\"></amexio-btn>\n            <amexio-btn (onClick)=\"downSwitch()\" [type]=\"'link'\" [tooltipMessage]=\"'move down'\" [block]=\"true\" [icon]=\"'arrow-down'\"></amexio-btn>\n            <amexio-btn (onClick)=\"moveDown()\" [type]=\"'link'\" [tooltipMessage]=\"'bottom'\" [block]=\"true\" [icon]=\"'caret-down fa-2x '\"></amexio-btn>\n          </div>\n        </div>\n\n      </div>\n      </div>\n    <div [style.width]=\"itemSelectorWidth\">\n      <div class=\"list-group\" [style.height]=\"itemSelectorHeight\">\n        <button type=\"button\" class=\"list-group-item\" style=\"background-color:#cecece\">Selected</button>\n        <div style=\"height:100%;overflow-y: auto;position:relative;\" >\n        <button type=\"button\" class=\"list-group-item list-group-item-action\"  *ngFor=\"let data of selectedData; let i = index\" (click)=\"itemCkick(data,i)\">{{data[displayField]}}</button>\n        </div>\n      </div>\n    </div>\n    </div>\n    \n  ",
                providers: [CommonHttpService]
            },] },
];
/**
 * @nocollapse
 */
ItemSelectorComponent.ctorParameters = function () { return [
    { type: CommonHttpService, },
]; };
ItemSelectorComponent.propDecorators = {
    'height': [{ type: Input },],
    'httpUrl': [{ type: Input },],
    'dataReader': [{ type: Input },],
    'httpMethod': [{ type: Input },],
    'ItemSelectBindData': [{ type: Input },],
    'displayField': [{ type: Input },],
    'valueField': [{ type: Input },],
    'availableRecords': [{ type: Output },],
    'selectedRecords': [{ type: Output },],
};

/**
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Created by Ketan Gote on 6/30/17.
 */
var NavbarComponent = (function () {
    /**
     * @param {?} _http
     * @param {?} carouselService
     */
    function NavbarComponent(_http, carouselService) {
        this._http = _http;
        this.carouselService = carouselService;
        this.selectedNode = new EventEmitter();
        this.elementId = 'nav-' + new Date().getTime() + Math.round(Math.random()) + '-';
    }
    /**
     * @param {?} event
     * @param {?} ind
     * @return {?}
     */
    NavbarComponent.prototype.adjustPosition = function (event, ind) {
        this.thd = document.getElementById(this.elementId + 'dd-lr-' + ind);
        this.thdm = document.getElementById(this.elementId + 'dd-m-' + ind);
        this.thdm.style = 'margin-left: ' + this.thd.offsetLeft + 'px;';
    };
    /**
     * @return {?}
     */
    NavbarComponent.prototype.ngOnInit = function () {
    };
    /**
     * @return {?}
     */
    NavbarComponent.prototype.ngAfterViewInit = function () {
        if (this.httpMethod && this.httpUrl) {
            this.callService();
        }
        else if (this.bindData) {
            this.setData(this.bindData);
        }
    };
    /**
     * @param {?} nodeData
     * @return {?}
     */
    NavbarComponent.prototype.menuClick = function (nodeData) {
        this.selectedNode.emit(nodeData);
    };
    /**
     * @return {?}
     */
    NavbarComponent.prototype.renderServiceData = function () {
        this.setData(this.bindData);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    NavbarComponent.prototype.setData = function (httpResponse) {
        this.menus = this.getData(httpResponse);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    NavbarComponent.prototype.getData = function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        if ((this.dataReader && this.dataReader.length > 0)) {
            var /** @type {?} */ dr = this.dataReader.split('.');
            for (var /** @type {?} */ ir = 0; ir < dr.length; ir++) {
                responsedata = responsedata[dr[ir]];
            }
        }
        return responsedata;
    };
    /**
     * @return {?}
     */
    NavbarComponent.prototype.callService = function () {
        var _this = this;
        this.carouselService.fetchData(this.httpUrl, this.httpMethod).subscribe(function (response) {
            _this.bindData = response.json();
        }, function (error) {
        }, function () {
            _this.renderServiceData();
        });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    NavbarComponent.prototype.getToggleClass = function (data) {
        return data.hasOwnProperty('childrens');
    };
    return NavbarComponent;
}());
NavbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-menubar',
                template: "\n      \n          <nav class=\"navbar navbar-toggleable-md navbar-light bg-faded \" [ngClass]=\"{ 'fixed-bottom dropup':bottom}\">\n            <button class=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span class=\"navbar-toggler-icon\"></span>\n            </button>\n\n              <div class=\"collapse navbar-collapse \" id=\"navbarNavDropdown\">\n                  <ul class=\"nav navbar-nav bg-faded\">\n                      <li class=\"dropdown dropdown-large bg-faded\" id=\"{{elementId}}dd-lr-{{ind}}\" *ngFor=\"let mh of menus let ind = index\" >\n                          <a [ngClass]=\"{'dropdown-toggle':getToggleClass(mh)}\" data-toggle=\"dropdown\" (click)=\"adjustPosition($event, ind)\">\n                              <ng-container *ngIf=\"headerTemplate==null\">\n                                  &nbsp;&nbsp;{{mh.text}}\n                              </ng-container><ng-template *ngIf=\"headerTemplate!=null\" [ngTemplateOutlet]=\"headerTemplate\" [ngOutletContext]=\"{ $implicit: {}, navHeader:mh }\"></ng-template>\n                          </a>\n                          <ng-container *ngIf=\"mh.childrens\">\n                              <ul class=\"dropdown-menu\" id=\"{{elementId}}dd-m-{{ind}}\">\n                                <div class=\"row\">\n                                  <li class=\"col-sm-4\" style=\"position: static !important\" *ngFor=\"let sm of mh.childrens let ind =index\">\n                                    <ul style=\"padding: 0px;margin: 0px;\">\n                                      <li style=\"list-style: none;color: #428bca;font-size: 18px;padding: 3px 2px;position: static !important\">\n                                        <a  style=\"text-decoration: none;color: #428bca\" (click)=\"menuClick(sm)\" style=\"cursor:pointer\">\n                                          <ng-container *ngIf=\"childTemplate==null\">{{sm.text}}</ng-container>\n                                          <ng-template *ngIf=\"childTemplate!=null\" [ngTemplateOutlet]=\"childTemplate\" [ngOutletContext]=\"{ $implicit: {}, menuHeader:sm }\"></ng-template>\n                                        </a>\n                                      </li>\n                                      <ng-container *ngIf=\"sm.childrens\">\n                                        <li (nodeClick)=\"menuClick($event)\"  style=\"list-style: none; padding:0px;\"  amexio-submenu-view [subMenuData]=\"sm.childrens\"  [templates]=\"subMenuTemplate\"></li>\n                                      </ng-container>\n                                    </ul>\n                                  </li>\n                                </div>\n                                 \n                              </ul>\n                          </ng-container>\n                      </li>\n                  </ul>\n              </div>\n          </nav>\n  ",
                styles: [
                    "\n          footer .navbar-collapse.in {\n              bottom: 70px;\n              position: absolute;\n              background-color:#333;\n              width: 100%;\n          }\n\n          @media screen and (max-width: 768px) {\n              footer .navbar-collapse {\n                  position: absolute;\n                  bottom: 70px;\n                  width: 100%;\n                  background-color: #303030;\n              }\n          }\n          .dropdown-large {\n              position: static !important;\n          }\n\n          .dropdown-menu-large {\n              padding: 10px 0px;\n          }\n\n    "
                ],
                providers: [CommonHttpService]
            },] },
];
/**
 * @nocollapse
 */
NavbarComponent.ctorParameters = function () { return [
    { type: Http, },
    { type: CommonHttpService, },
]; };
NavbarComponent.propDecorators = {
    'httpUrl': [{ type: Input },],
    'httpMethod': [{ type: Input },],
    'dataReader': [{ type: Input },],
    'bindData': [{ type: Input },],
    'bottom': [{ type: Input },],
    'selectedNode': [{ type: Output },],
    'headerTemplate': [{ type: ContentChild, args: ['amexioNavHeaderTmpl',] },],
    'childTemplate': [{ type: ContentChild, args: ['amexioMenuHeaderTmpl',] },],
    'subMenuTemplate': [{ type: ContentChild, args: ['amexioSubMenuTmpl',] },],
};

/**
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Created by Ketan Gote on 6/30/17.
 */
var NavbarSubMenuComponent = (function () {
    function NavbarSubMenuComponent() {
        this.nodeClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NavbarSubMenuComponent.prototype.ngOnInit = function () {
    };
    /**
     * @param {?} nodeData
     * @return {?}
     */
    NavbarSubMenuComponent.prototype.menuClick = function (nodeData) {
        this.nodeClick.emit(nodeData);
    };
    return NavbarSubMenuComponent;
}());
NavbarSubMenuComponent.decorators = [
    { type: Component, args: [{
                selector: '[amexio-submenu-view]',
                template: "\n    <ul style=\"list-style: none;padding: 1px;\">\n      <li style=\"list-style: none; padding: 1px 20px; color: #777\"  *ngFor=\"let sm of subMenuData\">\n        <ng-container  *ngIf=\"sm.childrens\">\n          <a style=\"text-decoration: none;color: #777\" (click)=\"menuClick(sm)\" style=\"cursor:pointer\">\n            <ng-container *ngIf=\"templates==null\">\n              {{sm.text}}\n            </ng-container>\n            <ng-template  [ngTemplateOutlet]=\"templates\" [ngOutletContext]=\"{ $implicit: {}, subMenus:sm }\"></ng-template>\n           </a>\n          <ul style=\"list-style: none;padding: 1px;\">\n            <ng-container *ngIf=\"sm.childrens\">\n              <li style=\"list-style: none;padding: 1px; color: #777\" (nodeClick)=\"menuClick($event)\" amexio-submenu-view [subMenuData]=\"sm.childrens\" [templates]=\"templates\"></li>\n            </ng-container>\n          </ul>\n        </ng-container>\n        \n        <ng-container  *ngIf=\"!sm.childrens\">\n          <a style=\"text-decoration: none;color: #777\" (click)=\"menuClick(sm)\" style=\"cursor:pointer\">\n           <ng-container *ngIf=\"templates==null\">\n             {{sm.text}}\n           </ng-container> \n            <ng-template *ngIf=\"templates!=null\"  [ngTemplateOutlet]=\"templates\" [ngOutletContext]=\"{ $implicit: {}, subMenus:sm }\"></ng-template>\n          </a>\n        </ng-container>\n      </li>\n    </ul>\n  "
            },] },
];
/**
 * @nocollapse
 */
NavbarSubMenuComponent.ctorParameters = function () { return []; };
NavbarSubMenuComponent.propDecorators = {
    'subMenuData': [{ type: Input },],
    'nodeClick': [{ type: Output },],
    'templates': [{ type: Input },],
};

/**
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Created by Ketan Gote on 7/4/17.
 */
var SideNavBarComponent = (function () {
    /**
     * @param {?} _http
     * @param {?} navService
     * @param {?} cdf
     */
    function SideNavBarComponent(_http, navService, cdf) {
        this._http = _http;
        this.navService = navService;
        this.cdf = cdf;
        this.selectedNode = new EventEmitter();
        this.elementId = 'amexio-sidenav-view-' + Math.random() + '-' + new Date().getTime();
        this.expanded = false;
        this.filter = false;
        this.width = "20%";
    }
    /**
     * @return {?}
     */
    SideNavBarComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.toPosition = this.toPosition + 'px';
        if (this.httpMethod && this.httpUrl) {
            this.callService();
        }
        else if (this.bindData) {
            this.setData(this.bindData);
        }
        // this.openNav();
        if (this.expanded) {
            setTimeout(function () {
                _this.openNav();
            });
        }
    };
    /**
     * @return {?}
     */
    SideNavBarComponent.prototype.ngAfterViewInit = function () {
        /* if (this.httpMethod && this.httpUrl) {
           this.callService();
         } else if (this.bindData) {
           this.setData(this.bindData);
         }
         // this.openNav();
     
         if (this.expanded) {
           setTimeout(() => {
             this.openNav();
           });
         }*/
    };
    /**
     * @param {?} node
     * @return {?}
     */
    SideNavBarComponent.prototype.expandNode = function (node) {
        node.expand = !node.expand;
        if (node.expand) {
            node.hstyle = {
                'display': 'block'
            };
        }
        else {
            node.hstyle = {
                'display': 'none'
            };
        }
        var /** @type {?} */ nodeClick = JSON.parse(JSON.stringify(node));
        delete nodeClick.hstyle;
        delete nodeClick.expand;
        this.menuClick(nodeClick);
    };
    /**
     * @param {?} nodeData
     * @return {?}
     */
    SideNavBarComponent.prototype.menuClick = function (nodeData) {
        this.selectedNode.emit(nodeData);
        if (!nodeData.childrens && !this.expanded) {
            this.closeNav();
        }
    };
    /**
     * @return {?}
     */
    SideNavBarComponent.prototype.renderServiceData = function () {
        this.setData(this.bindData);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    SideNavBarComponent.prototype.setData = function (httpResponse) {
        this.menus = this.getData(httpResponse);
        this.orgMenus = JSON.parse(JSON.stringify(this.menus));
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    SideNavBarComponent.prototype.getData = function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        if ((this.dataReader && this.dataReader.length > 0)) {
            var /** @type {?} */ dr = this.dataReader.split('.');
            for (var /** @type {?} */ ir = 0; ir < dr.length; ir++) {
                responsedata = responsedata[dr[ir]];
            }
        }
        return responsedata;
    };
    /**
     * @return {?}
     */
    SideNavBarComponent.prototype.callService = function () {
        var _this = this;
        this.navService.fetchData(this.httpUrl, this.httpMethod).subscribe(function (response) {
            _this.bindData = response.json();
        }, function (error) {
        }, function () {
            _this.renderServiceData();
            _this.cdf.markForCheck();
        });
    };
    /**
     * @return {?}
     */
    SideNavBarComponent.prototype.openNav = function () {
        document.getElementById(this.elementId).style.width = this.width;
    };
    /**
     * @return {?}
     */
    SideNavBarComponent.prototype.closeNav = function () {
        document.getElementById(this.elementId).style.width = '0';
    };
    /**
     * @return {?}
     */
    SideNavBarComponent.prototype.filterData = function () {
        if (this.filterText.length >= 1) {
            var /** @type {?} */ mdata = JSON.parse(JSON.stringify(this.orgMenus));
            var /** @type {?} */ mnodes = this.searchTree(mdata, this.filterText);
            this.menus = mnodes;
        }
        else {
            this.menus = JSON.parse(JSON.stringify(this.orgMenus));
        }
    };
    /**
     * @param {?} data
     * @param {?} matchingTitle
     * @return {?}
     */
    SideNavBarComponent.prototype.searchTree = function (data, matchingTitle) {
        var /** @type {?} */ res = data.filter(function f(node) {
            node.expand = true;
            if (node.text.toLowerCase().startsWith(matchingTitle.toLowerCase())) {
                return true;
            }
            if (node.childrens) {
                return (node.childrens = node.childrens.filter(f)).length;
            }
        });
        return res;
    };
    return SideNavBarComponent;
}());
SideNavBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-sidemenubar',
                template: "\n\n      <div [style.margin-top]=\"toPosition\" [ngClass]=\"{'sidenavleft':!right, 'sidenavright':right}\"  [attr.id]=\"elementId\" (mouseleave)=\"expanded?null:closeNav()\">\n          <ul class=\"navbar-nav\">\n            <li *ngIf=\"filter==true\">\n                <div style=\"padding-top: 5px;padding-bottom: 5px;\">\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"filterText\"  placeholder=\"Search\" (keyup)=\"filterData()\"  style=\"width: 100%;\" />\n                </div>\n            </li>\n              <li class=\"nav-item\" *ngFor=\"let header of menus \">\n                  <a class=\"nav-link\"  (click)=\"expandNode(header)\">\n                      <ng-container *ngIf=\"headerTemplate==null\">{{header.text}}</ng-container>\n\n                      <ng-template *ngIf=\"headerTemplate!=null\" [ngTemplateOutlet]=\"headerTemplate\" [ngOutletContext]=\"{ $implicit: {}, navHeader:header }\"></ng-template>\n\n                      <span *ngIf=\"header.childrens \"  style=\"float: right;\" class=\"fa\" [ngClass]=\"{'fa-angle-up':header.expand,'fa-angle-down':!header.expand}\"></span>\n                  </a>\n                  <ng-container *ngIf=\"header.childrens && header.expand\">\n                      <div [ngStyle]=\"header.hstyle\" >\n                          <ul>\n                              <li *ngFor=\"let level1Menu of header.childrens\">\n                                  <a (click)=\"menuClick(level1Menu)\">\n                                      <ng-container *ngIf=\"childTemplate==null\">{{level1Menu.text}}</ng-container>\n                                      <ng-template *ngIf=\"childTemplate!=null\" [ngTemplateOutlet]=\"childTemplate\" [ngOutletContext]=\"{ $implicit: {}, menuHeader:level1Menu }\"></ng-template>\n                                  </a>\n                                  <ng-container *ngIf=\"level1Menu.childrens\">\n                                      <ul  style=\"list-style: none; padding:0px;\" (nodeClick)=\"menuClick($event)\"  [templates]=\"subMenuTemplate\"  amexio-submenu-view [subMenuData]=\"level1Menu.childrens\"></ul>\n                                  </ng-container>\n                              </li>\n                          </ul>\n                      </div>\n                  </ng-container>\n\n              </li>\n          </ul>\n      </div>\n\n      <span [style.margin-top]=\"toPosition\" [ngClass]=\"{'sidenavopenleft':!right, 'sidenavopenright':right}\"  (click)=\"openNav()\">&#9776;</span>\n\n  ",
                styles: ["\n\n      ul li{\n          list-style: none;\n          padding: 1px;\n      }\n\n      a{\n          cursor: pointer;\n          text-decoration: none;\n      }\n\n      .sidenavleft {\n          height: 100%;\n          width: 0;\n          position: fixed;\n          z-index: 1;\n          top: 0;\n          left: 0;\n          background-color: #ffffff;\n          overflow-x: hidden;\n          transition: 0.5s;\n          overflow: auto;\n      }\n\n      .sidenavopenleft{\n          position:absolute;\n          top:0;\n          left:0;\n          font-size:30px;\n          cursor:pointer\n      }\n\n      .sidenavleft >ul >li {\n          border-bottom: 1px solid #e7e7e7;\n      }\n\n      .sidenavright {\n          height: 100%;\n          width: 0;\n          position: fixed;\n          z-index: 1;\n          top: 0;\n          right: 0;\n          background-color: #ffffff;\n          overflow-x: hidden;\n          transition: 0.5s;\n          overflow: auto;\n      }\n\n      .sidenavopenright{\n          position:absolute;\n          top:0;\n          right:0;\n          font-size:30px;\n          cursor:pointer\n      }\n\n      .sidenavright >ul >li {\n          border-bottom: 1px solid #e7e7e7;\n      }\n\n      @media screen and (max-height: 450px) {\n          .sidenavleft {padding-top: 15px;}\n      }\n\n  "],
                providers: [CommonHttpService]
            },] },
];
/**
 * @nocollapse
 */
SideNavBarComponent.ctorParameters = function () { return [
    { type: Http, },
    { type: CommonHttpService, },
    { type: ChangeDetectorRef, },
]; };
SideNavBarComponent.propDecorators = {
    'httpUrl': [{ type: Input },],
    'httpMethod': [{ type: Input },],
    'dataReader': [{ type: Input },],
    'bindData': [{ type: Input },],
    'expanded': [{ type: Input },],
    'filter': [{ type: Input },],
    'toPosition': [{ type: Input },],
    'width': [{ type: Input },],
    'selectedNode': [{ type: Output },],
    'right': [{ type: Input },],
    'headerTemplate': [{ type: ContentChild, args: ['amexioNavHeaderTmpl',] },],
    'childTemplate': [{ type: ContentChild, args: ['amexioMenuHeaderTmpl',] },],
    'subMenuTemplate': [{ type: ContentChild, args: ['amexioSubMenuTmpl',] },],
};

/**
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Created by Ketan Gote on 6/28/17.
 */
var FilterTreeViewComponent = (function () {
    /**
     * @param {?} _http
     * @param {?} cdf
     * @param {?} treeViewFilterService
     */
    function FilterTreeViewComponent(_http, cdf, treeViewFilterService) {
        this._http = _http;
        this.cdf = cdf;
        this.treeViewFilterService = treeViewFilterService;
        this.enableCheckBox = false;
        this.selectedRecord = new EventEmitter();
        this.onTreeNodeChecked = new EventEmitter();
        this.isDataFound = true;
        this.onClickSearch = false;
        this.filterIndex = 3;
        this.triggerChar = 1;
        this.filterOptionData = [
            {
                "key": "Is Equal To",
                "value": "1",
                "type": "string",
                "checkedStatus": ""
            },
            {
                "key": "Is Not Equal To",
                "value": "2",
                "type": "string",
                "checkedStatus": ""
            },
            {
                "key": "Start With",
                "value": "3",
                "type": "string",
                "checkedStatus": "fa fa-check"
            },
            {
                "key": "Ends With",
                "value": "4",
                "type": "string",
                "checkedStatus": ""
            },
            {
                "key": "Contains",
                "value": "5",
                "type": "string",
                "checkedStatus": ""
            },
        ];
    }
    /**
     * @return {?}
     */
    FilterTreeViewComponent.prototype.ngOnInit = function () {
        if (this.parentTmp != null) {
            this.templates = { treeNodeTemplate: this.parentTmp };
        }
        else if (this.templates != null) {
            this.parentTmp = this.templates.treeNodeTemplate;
            // this.cdf.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    FilterTreeViewComponent.prototype.ngAfterViewInit = function () {
        if (this.parentTmp != null) {
            this.templates = { treeNodeTemplate: this.parentTmp };
        }
        else if (this.templates != null) {
            this.parentTmp = this.templates.treeNodeTemplate;
            // this.cdf.detectChanges();
        }
        if (this.httpMethod && this.httpUrl) {
            this.callService();
        }
        else if (this.dataTableBindData) {
            this.setData(this.dataTableBindData);
        }
    };
    /**
     * @return {?}
     */
    FilterTreeViewComponent.prototype.filterData = function () {
        if (this.filterText.length >= this.triggerChar) {
            var /** @type {?} */ tData = JSON.parse(JSON.stringify(this.orgTreeData));
            var /** @type {?} */ treeNodes = this.searchTree(tData, this.filterText);
            this.treeData = treeNodes;
            if (this.treeData.length === 0) {
                this.isDataFound = false;
            }
            else {
                this.isDataFound = true;
            }
        }
        else if (this.onClickSearch) {
            var /** @type {?} */ tData = JSON.parse(JSON.stringify(this.orgTreeData));
            var /** @type {?} */ treeNodes = this.searchTree(tData, this.filterText);
            this.treeData = treeNodes;
            this.onClickSearch = false;
            if (this.treeData.length == 0) {
                this.isDataFound = false;
            }
            else {
                this.isDataFound = true;
            }
        }
        else {
            this.isDataFound = true;
            this.treeData = this.orgTreeData;
        }
    };
    /**
     * @param {?} data
     * @param {?} matchingTitle
     * @return {?}
     */
    FilterTreeViewComponent.prototype.searchTree = function (data, matchingTitle) {
        var /** @type {?} */ fi = this.filterIndex;
        var /** @type {?} */ res = data.filter(function f(node) {
            if (fi == 5 && node.text.toLowerCase().includes(matchingTitle.toLowerCase())) {
                return true;
            }
            if (fi == 3 && node.text.toLowerCase().startsWith(matchingTitle.toLowerCase())) {
                return true;
            }
            if (fi == 1 && node.text.toLowerCase() == matchingTitle.toLowerCase()) {
                return true;
            }
            if (fi == 2 && node.text.toLowerCase() != matchingTitle.toLowerCase()) {
                return true;
            }
            if (fi == 4 && node.text.toLowerCase().endsWith(matchingTitle.toLowerCase())) {
                return true;
            }
            if (node.children) {
                return (node.children = node.children.filter(f)).length;
            }
        });
        return res;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    FilterTreeViewComponent.prototype.filterOption = function (data) {
        this.onClickSearch = true;
        this.filterIndex = data.value;
        this.filterOptionData.forEach(function (opt) {
            if (opt.value != data.value) {
                opt.checkedStatus = '';
            }
            else {
                opt.checkedStatus = 'fa fa-check';
            }
        });
        this.filterData();
    };
    /**
     * @return {?}
     */
    FilterTreeViewComponent.prototype.renderServiceData = function () {
        this.setData(this.dataTableBindData);
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    FilterTreeViewComponent.prototype.setData = function (httpResponse) {
        var /** @type {?} */ tdata = this.getData(httpResponse);
        if (tdata) {
            this.orgTreeData = JSON.parse(JSON.stringify(tdata));
            this.treeData = tdata;
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    FilterTreeViewComponent.prototype.getData = function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        var /** @type {?} */ dr = this.dataReader.split('.');
        for (var /** @type {?} */ ir = 0; ir < dr.length; ir++) {
            responsedata = responsedata[dr[ir]];
        }
        return responsedata;
    };
    /**
     * @return {?}
     */
    FilterTreeViewComponent.prototype.callService = function () {
        var _this = this;
        this.treeViewFilterService.fetchData(this.httpUrl, this.httpMethod).subscribe(function (response) {
            _this.dataTableBindData = response.json();
        }, function (error) {
        }, function () {
            _this.renderServiceData();
        });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    FilterTreeViewComponent.prototype.onRowSelect = function (data) {
        this.selectedRecord.emit(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    FilterTreeViewComponent.prototype.onCheckSelect = function (data) {
        this.onTreeNodeChecked.emit(data);
    };
    return FilterTreeViewComponent;
}());
FilterTreeViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-tree-filter-view',
                template: "\n\n      <div class=\"col-lg-12\">\n          <div class=\"col-lg-12\">\n            <div class=\"input-group\">\n              <input type=\"text\" class=\"form-control\" aria-label=\"Text input with dropdown button\" [(ngModel)]=\"filterText\"  placeholder=\"Search\" (keyup)=\"filterData()\">\n              <div class=\"input-group-btn\">\n                <button type=\"button\" class=\"btn btn-secondary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                </button>\n                <div class=\"dropdown-menu dropdown-menu-right\">\n                  <a class=\"dropdown-item\" *ngFor=\"let opt of filterOptionData\" (click)=\"filterOption(opt)\">{{opt.key}}&nbsp;<i [class]=\"opt.checkedStatus\" aria-hidden=\"true\"></i></a>\n                </div>\n              </div>\n            </div>\n              <ng-container *ngIf=\"isDataFound\">\n                  <amexio-tree-view\n                          [dataTableBindData]=\"treeData\"\n                          [enableCheckBox] =\"enableCheckBox\"\n                          (onTreeNodeChecked) = \"onCheckSelect($event)\"\n                          (selectedRecord)=\"onRowSelect($event)\" [templates]=\"templates\">\n                  </amexio-tree-view>\n              </ng-container>\n              <ng-container *ngIf=\"!isDataFound\">\n                  <p>No Data Found.</p>\n              </ng-container>\n\n          </div>\n      </div>\n\n\n  ",
                providers: [CommonHttpService]
            },] },
];
/**
 * @nocollapse
 */
FilterTreeViewComponent.ctorParameters = function () { return [
    { type: Http, },
    { type: ChangeDetectorRef, },
    { type: CommonHttpService, },
]; };
FilterTreeViewComponent.propDecorators = {
    'httpUrl': [{ type: Input },],
    'httpMethod': [{ type: Input },],
    'dataReader': [{ type: Input },],
    'dataTableBindData': [{ type: Input },],
    'enableCheckBox': [{ type: Input },],
    'selectedRecord': [{ type: Output },],
    'onTreeNodeChecked': [{ type: Output },],
    'triggerChar': [{ type: Input },],
    'parentTmp': [{ type: ContentChild, args: ['amexioTreeTemplate',] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var TreeViewComponent = (function () {
    /**
     * @param {?} treeViewService
     * @param {?} cdf
     */
    function TreeViewComponent(treeViewService, cdf) {
        this.treeViewService = treeViewService;
        this.cdf = cdf;
        this.selectedRecord = new EventEmitter();
        this.enableCheckBox = false;
        this.onTreeNodeChecked = new EventEmitter();
        this.data = [];
    }
    /**
     * @return {?}
     */
    TreeViewComponent.prototype.ngOnInit = function () {
    };
    /**
     * @return {?}
     */
    TreeViewComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.httpMethod && this.httpUrl) {
            this.treeViewService.fetchData(this.httpUrl, this.httpMethod).subscribe(function (response) {
                _this.responseData = response.json();
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
        else if (this.dataTableBindData) {
            this.setData(this.dataTableBindData);
        }
        if (this.parentTmp != null) {
            this.templates = { treeNodeTemplate: this.parentTmp };
        }
        else if (this.templates != null) {
            this.parentTmp = this.templates.treeNodeTemplate;
            this.cdf.detectChanges();
        }
    };
    /**
     * @param {?} change
     * @return {?}
     */
    TreeViewComponent.prototype.ngOnChanges = function (change) {
        if (change['dataTableBindData']) {
            var /** @type {?} */ data = change['dataTableBindData'].currentValue;
            if (data) {
                this.setData(data);
            }
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    TreeViewComponent.prototype.setData = function (httpResponse) {
        var /** @type {?} */ treedata = this.getResponseData(httpResponse);
        if (treedata) {
            this.data = treedata;
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    TreeViewComponent.prototype.getResponseData = function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        if ((this.dataReader && this.dataReader.length > 0)) {
            var /** @type {?} */ dr = this.dataReader.split('.');
            for (var /** @type {?} */ ir = 0; ir < dr.length; ir++) {
                responsedata = responsedata[dr[ir]];
            }
        }
        return responsedata;
    };
    /**
     * @param {?} treeData
     * @return {?}
     */
    TreeViewComponent.prototype.toggle = function (treeData) {
        var _this = this;
        if (!treeData.leaf)
            treeData.expanded = !treeData.expanded;
        if (treeData.lazy && treeData.children && treeData.children.length <= 0) {
            this.lazyNode = treeData;
            this.treeViewService.fetchData(treeData.lazy.httpUrl, treeData.lazy.httpMethod).subscribe(function (response) {
                _this.responseData = response.json();
            }, function (error) {
            }, function () {
                _this.setLazyData(_this.responseData);
            });
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    TreeViewComponent.prototype.setLazyData = function (httpResponse) {
        delete this.lazyNode.leaf;
        this.lazyNode['expanded'] = true;
        for (var /** @type {?} */ di = 0; di < httpResponse.data.length; di++) {
            this.lazyNode.children.push(httpResponse.data[0]);
        }
    };
    /**
     * @param {?} treeData
     * @return {?}
     */
    TreeViewComponent.prototype.setSelectedRecord = function (treeData) {
        this.emitData(treeData);
    };
    /**
     * @param {?} treeData
     * @return {?}
     */
    TreeViewComponent.prototype.emitData = function (treeData) {
        this.selectedRecord.emit(JSON.parse(JSON.stringify(treeData)));
    };
    /**
     * @param {?} checkedData
     * @return {?}
     */
    TreeViewComponent.prototype.emitCheckedData = function (checkedData) {
        var _this = this;
        checkedData.checked = !checkedData.checked;
        if (checkedData.checked) {
            if (checkedData.hasOwnProperty('children')) {
                checkedData.children.forEach(function (option) {
                    option.checked = true;
                    if (option.hasOwnProperty('children')) {
                        _this.setCheckedStatusFromParent(option);
                    }
                });
            }
            this.onTreeNodeChecked.emit(this.data);
        }
        else {
            if (checkedData.hasOwnProperty('children')) {
                checkedData.children.forEach(function (option) {
                    option.checked = false;
                    if (option.hasOwnProperty('children')) {
                        _this.searchObject(option);
                    }
                });
            }
            this.onTreeNodeChecked.emit(this.data);
        }
    };
    /**
     * @param {?} object
     * @return {?}
     */
    TreeViewComponent.prototype.searchObject = function (object) {
        var _this = this;
        object.children.forEach(function (childOption) {
            childOption.checked = false;
            if (childOption.hasOwnProperty('children')) {
                _this.searchObject(childOption);
            }
        });
    };
    /**
     * @param {?} object
     * @return {?}
     */
    TreeViewComponent.prototype.setCheckedStatusFromParent = function (object) {
        var _this = this;
        object.children.forEach(function (childOption) {
            childOption.checked = true;
            if (childOption.hasOwnProperty('children')) {
                _this.setCheckedStatusFromParent(childOption);
            }
        });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    TreeViewComponent.prototype.onTreeNodeCheck = function (data) {
        this.onTreeNodeChecked.emit(this.data);
    };
    return TreeViewComponent;
}());
TreeViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-tree-view',
                template: "\n        <div *ngIf=\"data.length== 0\">\n            <div class=\"loading-mask\"  style=\"height: 300px;width: 400px;\">\n\n            </div>\n        </div>\n\n        <ul style=\"list-style-type: none;\" *ngIf=\"data.length > 0\">\n            <li style=\"cursor: pointer\" *ngFor=\"let treeData of data\">\n                <div >\n                    <span class=\"fa \" [ngClass]=\"{'fa-minus': treeData.expanded, 'fa-plus': (!treeData.expanded && treeData.children)}\" (click)=\"toggle(treeData)\"> </span>\n                    <span *ngIf=\"enableCheckBox\">\n                    <input type=\"checkbox\" [checked]=\"'checked'?treeData.checked:null\" (click)=\"emitCheckedData(treeData)\"/>                    \n                  </span>\n                    <label style=\"cursor: pointer\" (click)=\"emitData(treeData)\">\n                        <ng-container *ngIf=\"templates == null\">\n                            {{treeData.text}}\n                        </ng-container>\n                        <ng-template *ngIf=\"templates != null\" [ngTemplateOutlet]=\"parentTmp\" [ngOutletContext]=\"{ $implicit: { text: treeData.text } , icon: treeData.icon,node : treeData }\"></ng-template>\n                    </label>\n\n                </div>\n\n                <div *ngIf=\"treeData.expanded && treeData.expanded  == true\">\n                    <ul style=\"list-style-type: none;\">\n                        <li style=\"cursor: pointer\" *ngFor=\"let leaf of treeData.children\">\n                            <div>\n                                <span class=\"fa \" [ngClass]=\"{'fa-minus': leaf.expanded, 'fa-plus': (!leaf.expanded && leaf.children)}\" (click)=\"toggle(leaf)\"> </span>\n\n                                <span *ngIf=\"enableCheckBox\"><input type=\"checkbox\" [checked]=\"'checked'?leaf.checked:null\" (click)=\"emitCheckedData(leaf)\"/></span>\n\n                                <label (click)=\"emitData(leaf)\">\n                                    <ng-container *ngIf=\"templates == null\">{{ leaf.text }}</ng-container>\n                                    <ng-template *ngIf=\"templates != null\" [ngTemplateOutlet]=\"parentTmp\" [ngOutletContext]=\"{ $implicit: { text: leaf.text }, icon: leaf.icon, node : leaf }\"></ng-template>\n                                </label>\n\n                            </div>\n\n                            <div *ngIf=\"leaf.expanded && leaf.expanded  == true\">\n                                <amexio-tree-view [dataTableBindData]=\"leaf\" [dataReader]=\"'children'\" (selectedRecord)=\"setSelectedRecord($event)\" [templates]=\"templates\" (onTreeNodeChecked)=\"this.onTreeNodeCheck($event)\" [enableCheckBox]=\"enableCheckBox\"></amexio-tree-view>\n                            </div>\n                        </li>\n                    </ul>\n\n                </div>\n            </li>\n        </ul>",
                providers: [CommonHttpService],
                styles: ["\n        .loading-mask {\n            position: relative;\n        }\n\n        /*\n        Because we set .loading-mask relative, we can span our ::before\n        element over the whole parent element\n        */\n        .loading-mask::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            right: 0;\n            bottom: 0;\n            left: 0;\n            background-color: rgba(0, 0, 0, 0.25);\n        }\n\n        /*\n        Spin animation for .loading-mask::after\n        */\n        @keyframes spin {\n            from {\n                transform: rotate(0deg);\n            }\n            to {\n                transform: rotate(359deg);\n            }\n        }\n\n        /*\n        The loading throbber is a single spinning element with three\n        visible borders and a border-radius of 50%.\n        Instead of a border we could also use a font-icon or any\n        image using the content attribute.\n        */\n        .loading-mask::after {\n            content: \"\";\n            position: absolute;\n            border-width: 3px;\n            border-style: solid;\n            border-color: transparent rgb(255, 255, 255) rgb(255, 255, 255);\n            border-radius: 50%;\n            width: 24px;\n            height: 24px;\n            top: calc(50% - 12px);\n            left: calc(50% - 12px);\n            animation: 1s linear 0s normal none infinite running spin;\n            filter: drop-shadow(0 0 2 rgba(0, 0, 0, 0.33));\n        }\n\n        .hiderow{\n            visibility: hidden\n        }\n\n        .showrow{\n            visibility: visible;\n        }\n    "]
            },] },
];
/**
 * @nocollapse
 */
TreeViewComponent.ctorParameters = function () { return [
    { type: CommonHttpService, },
    { type: ChangeDetectorRef, },
]; };
TreeViewComponent.propDecorators = {
    'httpUrl': [{ type: Input },],
    'httpMethod': [{ type: Input },],
    'dataReader': [{ type: Input },],
    'dataTableBindData': [{ type: Input },],
    'selectedRecord': [{ type: Output },],
    'templates': [{ type: Input },],
    'headerKey': [{ type: Input },],
    'cookieName': [{ type: Input },],
    'enableCheckBox': [{ type: Input },],
    'parentTmp': [{ type: ContentChild, args: ['amexioTreeTemplate',] },],
    'onTreeNodeChecked': [{ type: Output },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas
 *
 */
var TreeDataTableComponent = (function () {
    /**
     * @param {?} treeDataTableService
     */
    function TreeDataTableComponent(treeDataTableService) {
        this.treeDataTableService = treeDataTableService;
        this.selectedRecord = new EventEmitter();
        this.viewRows = [];
        this.columns = [];
        this.columns.push({ text: 'Task', dataIndex: 'task', hidden: false, dataType: 'string' });
        this.columns.push({ text: 'Duration', dataIndex: 'duration', hidden: false, dataType: 'number' });
        this.columns.push({ text: 'User', dataIndex: 'user', hidden: false, dataType: 'string' });
    }
    /**
     * @return {?}
     */
    TreeDataTableComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.httpMethod && this.httpUrl) {
            this.treeDataTableService.fetchData(this.httpUrl, this.httpMethod).subscribe(function (response) {
                _this.responseData = response.json();
            }, function (error) {
            }, function () {
                _this.setData(_this.responseData);
            });
        }
    };
    /**
     * @return {?}
     */
    TreeDataTableComponent.prototype.ngAfterViewInit = function () {
    };
    /**
     * @param {?} change
     * @return {?}
     */
    TreeDataTableComponent.prototype.ngOnChanges = function (change) {
        if (this.dataTableBindData) {
            this.setData(this.dataTableBindData);
        }
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    TreeDataTableComponent.prototype.setData = function (httpResponse) {
        var /** @type {?} */ treedata = this.getResponseData(httpResponse);
        if (treedata) {
            this.data = treedata;
        }
        this.viewRows = this.createViewRows(this.data, null);
        this.renderData();
    };
    /**
     * @param {?} rowData
     * @param {?} rowIndex
     * @return {?}
     */
    TreeDataTableComponent.prototype.toggle = function (rowData, rowIndex) {
        this.toggleViewRows(rowData, !rowData.expanded, this.viewRows);
    };
    /**
     * @param {?} rowData
     * @param {?} expanded1
     * @param {?} viewData
     * @return {?}
     */
    TreeDataTableComponent.prototype.toggleViewRows = function (rowData, expanded1, viewData) {
        if (!rowData.leaf)
            rowData.expanded = expanded1;
        var /** @type {?} */ expanded = rowData.expanded;
        var /** @type {?} */ rowId = rowData.rowId;
        if (!rowData.level) {
            rowData.level = 0;
        }
        for (var /** @type {?} */ cr = 0; cr < viewData.length; cr++) {
            var /** @type {?} */ childRows = viewData[cr];
            if (childRows.parentId == rowId) {
                childRows.visible = expanded;
                childRows.level = rowData.level + 1;
                childRows.tdclass = 'tree-grid-level-' + childRows.level;
                if (childRows.haschildren && !rowData.expanded) {
                    this.toggleViewRows(childRows, rowData.expanded, viewData);
                }
            }
        }
    };
    /**
     * @return {?}
     */
    TreeDataTableComponent.prototype.renderData = function () {
        for (var /** @type {?} */ vr = 0; vr < this.viewRows.length; vr++) {
            var /** @type {?} */ childRows = this.viewRows[vr];
            if (childRows.parentId)
                childRows.visible = false;
            if (!childRows.parentId)
                childRows.visible = true;
        }
    };
    /**
     * @param {?} data
     * @param {?} parentId
     * @return {?}
     */
    TreeDataTableComponent.prototype.createViewRows = function (data, parentId) {
        var /** @type {?} */ viewTreeTableData = [];
        for (var /** @type {?} */ d = 0; d < data.length; d++) {
            var /** @type {?} */ td = JSON.parse(JSON.stringify(data[d]));
            var /** @type {?} */ rowId = Math.random();
            if (td.children && td.children.length > 0) {
                td['leaf'] = false;
                td['haschildren'] = true;
                td['visible'] = true;
            }
            else {
                td['leaf'] = true;
                td['haschildren'] = false;
                td['visible'] = false;
            }
            td['expanded'] = false;
            td['rowId'] = rowId;
            td['level'] = 1;
            td['tdclass'] = 'tree-grid-level-1';
            if (parentId)
                td['parentId'] = parentId;
            viewTreeTableData.push(td);
            if (td.children && td.children.length > 0) {
                var /** @type {?} */ dataArray = this.createViewRows(td.children, rowId);
                for (var /** @type {?} */ d1 = 0; d1 < dataArray.length; d1++) {
                    var /** @type {?} */ td1 = dataArray[d1];
                    viewTreeTableData.push(td1);
                }
                delete td.children;
            }
        }
        return viewTreeTableData;
    };
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    TreeDataTableComponent.prototype.getResponseData = function (httpResponse) {
        var /** @type {?} */ responsedata = httpResponse;
        var /** @type {?} */ dr = this.dataReader.split('.');
        for (var /** @type {?} */ ir = 0; ir < dr.length; ir++) {
            responsedata = responsedata[dr[ir]];
        }
        return responsedata;
    };
    /**
     * @param {?} rowData
     * @param {?} event
     * @return {?}
     */
    TreeDataTableComponent.prototype.setSelectedRow = function (rowData, event) {
        this.selectedRecord.emit(rowData);
    };
    /**
     * @param {?} col
     * @return {?}
     */
    TreeDataTableComponent.prototype.setSortColumn = function (col) {
        console.log(col);
        this.sortColumn = col;
        this.sortData();
    };
    /**
     * @return {?}
     */
    TreeDataTableComponent.prototype.sortData = function () {
        if (this.sortColumn) {
            if (this.sortColumn.dataIndex && this.sortColumn.dataType) {
                var /** @type {?} */ dataIndex = this.sortColumn.dataIndex;
                var /** @type {?} */ sortColDataIndex_1 = dataIndex;
                if (this.sortColumn.dataType == 'string') {
                    this.data.sort(function (a, b) {
                        debugger;
                        var /** @type {?} */ x = a[sortColDataIndex_1].toLowerCase();
                        var /** @type {?} */ y = b[sortColDataIndex_1].toLowerCase();
                        if (x < y) {
                            return -1;
                        }
                        if (x > y) {
                            return 1;
                        }
                        return 0;
                    });
                    this.viewRows = this.createViewRows(this.data, null);
                    this.renderData();
                }
                else if (this.sortColumn.dataType == 'number') {
                    this.data.sort(function (a, b) {
                        var /** @type {?} */ x = a[sortColDataIndex_1];
                        var /** @type {?} */ y = b[sortColDataIndex_1];
                        return x - y;
                    });
                    this.viewRows = this.createViewRows(this.data, null);
                    this.renderData();
                }
            }
        }
    };
    /**
     * @param {?} dataIndex
     * @return {?}
     */
    TreeDataTableComponent.prototype.setColumnVisiblity = function (dataIndex) {
        for (var /** @type {?} */ ic = 0; ic < this.columns.length; ic++) {
            var /** @type {?} */ col = this.columns[ic];
            if (col.dataIndex == dataIndex) {
                col.hidden = !col.hidden;
            }
        }
    };
    return TreeDataTableComponent;
}());
TreeDataTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-tree-data-table',
                template: "<table  class=\"table table-hover table-bordered \">\n        <thead>\n\n        <tr>\n            <td [attr.colspan]=\"columns.length\" width=\"100%\" align=\"right\">\n\n          <span style=\"float: left\">\n            <b>{{title}}</b>\n          </span>\n\n                <span style=\"float: right\">\n            <div class=\"dropdown\">\n              <a data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-list\" aria-hidden=\"true\"></i></a>\n                  <ul class=\"dropdown-menu dropdown-menu-right\">\n                      <li>\n                          &nbsp;&nbsp;<b> Show Columns</b>\n                      </li>\n                      <li *ngFor=\"let cols of columns\">\n                          <div class=\"checkbox\">\n                              <label>\n                                  &nbsp;&nbsp;<input type=\"checkbox\" (click)=\"setColumnVisiblity(cols.dataIndex)\" [attr.checked]=\"!cols.hidden ? true: null\"> {{cols.text +\" \"}}\n                              </label>\n                          </div>\n                      </li>\n                  </ul>\n            </div>\n          </span>\n            </td>\n        </tr>\n\n\n        <tr>\n            <td  *ngFor=\"let cols of columns\" [hidden]=\"cols.hidden\" >\n                <b><a (click)=\"setSortColumn(cols)\">{{cols.text}}</a></b>\n            </td>\n        </tr>\n\n        </thead>\n\n        <tr [ngClass]=\"{'hiderow' : !(viewRows.length > 0),'showrow' : viewRows.length > 0}\"  *ngFor=\"let row of viewRows let rowIndex = index\" [hidden]=\"!row.visible\" (click)=\"setSelectedRow(row, $event)\">\n            <td *ngFor=\"let cols of columns let colIndex = index\" [hidden] =\"cols.hidden\" >\n                <div style=\"cursor: pointer\" *ngIf=\"colIndex == 0\" class=\"tree-grid-levels\"\n                     [ngStyle]=\"{left: row.level*15+'px'}\" (click)=\"toggle(row,rowIndex)\">\n                  <span *ngIf=\"colIndex == 0\" class=\"fa \" [ngClass]=\"{'fa-minus': row.expanded, 'fa-plus': (!row.expanded && row.haschildren)}\" aria-hidden=\"true\">\n                  </span>\n                    {{row[cols.dataIndex]}}\n                </div>\n\n                <span *ngIf=\"colIndex > 0\" >{{row[cols.dataIndex]}}</span>\n\n            </td>\n        </tr>\n\n        <tr *ngIf=\"viewRows.length == 0\">\n            <td colspan=\"3\" style=\"height: 400px;\" class=\"loading-mask\">\n\n            </td>\n        </tr>\n    </table>",
                providers: [CommonHttpService],
                styles: ["\n      .tree-grid-levels{\n        position: relative;\n      }\n      .loading-mask {\n          position: relative;\n      }\n\n      /*\n      Because we set .loading-mask relative, we can span our ::before\n      element over the whole parent element\n      */\n      .loading-mask::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          right: 0;\n          bottom: 0;\n          left: 0;\n          background-color: rgba(0, 0, 0, 0.25);\n      }\n\n      /*\n      Spin animation for .loading-mask::after\n      */\n      @keyframes spin {\n          from {\n              transform: rotate(0deg);\n          }\n          to {\n              transform: rotate(359deg);\n          }\n      }\n\n      /*\n      The loading throbber is a single spinning element with three\n      visible borders and a border-radius of 50%.\n      Instead of a border we could also use a font-icon or any\n      image using the content attribute.\n      */\n      .loading-mask::after {\n          content: \"\";\n          position: absolute;\n          border-width: 3px;\n          border-style: solid;\n          border-color: transparent rgb(255, 255, 255) rgb(255, 255, 255);\n          border-radius: 50%;\n          width: 24px;\n          height: 24px;\n          top: calc(50% - 12px);\n          left: calc(50% - 12px);\n          animation: 1s linear 0s normal none infinite running spin;\n          filter: drop-shadow(0 0 2 rgba(0, 0, 0, 0.33));\n      }\n\n      .hiderow{\n          visibility: hidden\n      }\n\n      .showrow{\n          visibility: visible;\n      }\n     "]
            },] },
];
/**
 * @nocollapse
 */
TreeDataTableComponent.ctorParameters = function () { return [
    { type: CommonHttpService, },
]; };
TreeDataTableComponent.propDecorators = {
    'title': [{ type: Input },],
    'httpUrl': [{ type: Input },],
    'httpMethod': [{ type: Input },],
    'dataReader': [{ type: Input },],
    'dataTableBindData': [{ type: Input },],
    'pageSize': [{ type: Input },],
    'selectedRecord': [{ type: Output },],
};

/**
 * Created by ketangote on 7/25/17.
 */
var PaneActionComponent = (function () {
    function PaneActionComponent() {
        this.visible = true;
    }
    /**
     * @return {?}
     */
    PaneActionComponent.prototype.ngOnInit = function () {
    };
    return PaneActionComponent;
}());
PaneActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-pane-action',
                template: "\n\n    <ng-content></ng-content>\n\n\n  "
            },] },
];
/**
 * @nocollapse
 */
PaneActionComponent.ctorParameters = function () { return []; };
PaneActionComponent.propDecorators = {
    'visible': [{ type: Input },],
};

/**
 * Created by ketangote on 7/25/17.
 */
var PaneBodyComponent = (function () {
    function PaneBodyComponent() {
        this.visible = true;
    }
    /**
     * @return {?}
     */
    PaneBodyComponent.prototype.ngOnInit = function () {
    };
    return PaneBodyComponent;
}());
PaneBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-pane-body',
                template: "\n\n    <ng-content></ng-content>\n\n\n  "
            },] },
];
/**
 * @nocollapse
 */
PaneBodyComponent.ctorParameters = function () { return []; };
PaneBodyComponent.propDecorators = {
    'visible': [{ type: Input },],
};

/**
 * Created by ketangote on 7/25/17.
 */
var PaneHeaderComponent = (function () {
    function PaneHeaderComponent() {
        this.visible = true;
    }
    /**
     * @return {?}
     */
    PaneHeaderComponent.prototype.ngOnInit = function () {
    };
    return PaneHeaderComponent;
}());
PaneHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-pane-header',
                template: "\n\n    <ng-content></ng-content>\n\n\n  "
            },] },
];
/**
 * @nocollapse
 */
PaneHeaderComponent.ctorParameters = function () { return []; };
PaneHeaderComponent.propDecorators = {
    'visible': [{ type: Input },],
};

/**
 * Created by ketangote on 7/25/17.
 */
var WindowPaneComponent = (function () {
    function WindowPaneComponent() {
        this.showWindowChange = new EventEmitter();
        this.showWindow = false;
    }
    /**
     * @return {?}
     */
    WindowPaneComponent.prototype.ngOnInit = function () {
    };
    /**
     * @return {?}
     */
    WindowPaneComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () { return _this.visibleAnimate = true; }, 100);
    };
    Object.defineProperty(WindowPaneComponent.prototype, "showWindow", {
        /**
         * @return {?}
         */
        get: function () {
            return this._showWindow;
        },
        /**
         * @param {?} sw
         * @return {?}
         */
        set: function (sw) {
            this._showWindow = sw;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    WindowPaneComponent.prototype.close = function () {
        this.showWindow = false;
        this.showWindowChange.emit(this.showWindow);
    };
    return WindowPaneComponent;
}());
WindowPaneComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-window-pane',
                template: "\n  <div class=\"modal fade\"  tabindex=\"-1\" [ngClass]=\"{'show': visibleAnimate}\"\n       [ngStyle]=\"{'display': showWindow ? 'block' : 'none', 'opacity': visibleAnimate ? 1 : 0}\" style=\"overflow: auto\" >\n    <div class=\"modal-dialog \" role=\"document\" [ngClass]=\"{'modal-lg':(size==2),'modal-sm':(size==1)}\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          {{title}}\n          <button *ngIf=\"closable\" type=\"button\" class=\"close\" (click)=\"close()\">&times;</button>\n        </div>\n        <div class=\"modal-body\" >\n          <ng-content select=\"amexio-pane-body\"></ng-content>\n        </div>\n        <div class=\"modal-footer\">\n          <ng-content select=\"amexio-pane-action\"></ng-content>\n        </div>\n      </div>\n    </div>\n  </div>\n  ",
                styles: [
                    ".modal {\n        background: #888888;\n      }"
                ]
            },] },
];
/**
 * @nocollapse
 */
WindowPaneComponent.ctorParameters = function () { return []; };
WindowPaneComponent.propDecorators = {
    'title': [{ type: Input },],
    'closable': [{ type: Input },],
    'showWindowChange': [{ type: Output },],
    'size': [{ type: Input },],
    'showWindow': [{ type: Input },],
};

/**
 * Created by ketangote on 7/26/17.
 */
var DialogComponent = (function () {
    function DialogComponent() {
        this.showWindowChange = new EventEmitter();
        this.actionStatus = new EventEmitter();
        this.showWindow = false;
        this.dialogType = 1;
        this.primaryActionLabel = "Ok";
        this.secondaryActionLabel = "Cancel";
    }
    /**
     * @return {?}
     */
    DialogComponent.prototype.ngOnInit = function () {
    };
    /**
     * @return {?}
     */
    DialogComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () { return _this.visibleAnimate = true; }, 100);
    };
    Object.defineProperty(DialogComponent.prototype, "showWindow", {
        /**
         * @return {?}
         */
        get: function () {
            return this._showWindow;
        },
        /**
         * @param {?} sw
         * @return {?}
         */
        set: function (sw) {
            this._showWindow = sw;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DialogComponent.prototype.close = function () {
        this.showWindow = false;
        this.showWindowChange.emit(this.showWindow);
    };
    /**
     * @param {?} v
     * @return {?}
     */
    DialogComponent.prototype.status = function (v) {
        this.close();
        this.actionStatus.emit(v);
    };
    return DialogComponent;
}());
DialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-dialog',
                template: "\n    <div class=\"modal fade\"  tabindex=\"-1\" [ngClass]=\"{'show': visibleAnimate}\"\n         [ngStyle]=\"{'display': showWindow ? 'block' : 'none', 'opacity': visibleAnimate ? 1 : 0}\">\n      <div class=\"modal-dialog \" role=\"document\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            {{title}}\n          </div>\n          <div class=\"modal-body\" >\n            <ng-content select=\"amexio-pane-body\"></ng-content>\n          </div>\n          <div class=\"modal-footer\">\n            <amexio-btn *ngIf=\"(dialogType==2)\" [label]=\"secondaryActionLabel\" [type]=\"'default'\" (onClick)=\"status('cancel')\"></amexio-btn>\n            <amexio-btn [label]=\"primaryActionLabel\" [type]=\"'primary'\" (onClick)=\"status('ok')\"></amexio-btn>\n          </div>\n        </div>\n      </div>\n    </div>\n  ",
                styles: [
                    ".modal {\n      background: #888888;\n    }"
                ]
            },] },
];
/**
 * @nocollapse
 */
DialogComponent.ctorParameters = function () { return []; };
DialogComponent.propDecorators = {
    'title': [{ type: Input },],
    'showWindowChange': [{ type: Output },],
    'actionStatus': [{ type: Output },],
    'dialogType': [{ type: Input },],
    'primaryActionLabel': [{ type: Input },],
    'secondaryActionLabel': [{ type: Input },],
    'showWindow': [{ type: Input },],
};

/**
 * Created by ketangote on 7/27/17.
 */
var CardComponent = (function () {
    function CardComponent() {
        this._showCard = true;
        this.enableFooter = true;
        this.enableHeader = true;
    }
    /**
     * @return {?}
     */
    CardComponent.prototype.ngOnInit = function () {
    };
    /**
     * @return {?}
     */
    CardComponent.prototype.ngAfterViewInit = function () {
    };
    Object.defineProperty(CardComponent.prototype, "showCard", {
        /**
         * @return {?}
         */
        get: function () {
            return this._showCard;
        },
        /**
         * @param {?} sw
         * @return {?}
         */
        set: function (sw) {
            this._showCard = sw;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CardComponent.prototype.close = function () {
        this._showCard = false;
    };
    return CardComponent;
}());
CardComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-card-pane',
                template: "\n    \n\n    <div *ngIf=\"showCard\" style=\"padding: 2px;\">\n      <div class=\"card\" [ngClass]=\"cClass\">\n        <div *ngIf=\"enableHeader\" class=\"card-header\">\n          <ng-content select=\"amexio-pane-header\"></ng-content>\n        </div>\n        <div class=\"card-block\">\n          <ng-content select=\"amexio-pane-body\"></ng-content>\n        </div>\n        <div *ngIf=\"enableFooter\" class=\"card-footer\" style=\"float: right;\">\n          <ng-content select=\"amexio-pane-action\"></ng-content>\n        </div>\n      </div>\n    </div>\n    \n  ",
                styles: [
                    " "
                ]
            },] },
];
/**
 * @nocollapse
 */
CardComponent.ctorParameters = function () { return []; };
CardComponent.propDecorators = {
    'title': [{ type: Input },],
    'enableHeader': [{ type: Input },],
    'enableFooter': [{ type: Input },],
    'cClass': [{ type: Input },],
    'showCard': [{ type: Input },],
};

var AmexioWidgetModule = (function () {
    function AmexioWidgetModule() {
    }
    /**
     * @return {?}
     */
    AmexioWidgetModule.forRoot = function () {
        return {
            ngModule: AmexioWidgetModule,
            providers: [CommonHttpService]
        };
    };
    return AmexioWidgetModule;
}());
AmexioWidgetModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpModule
                ],
                declarations: [
                    ButtonComponent,
                    TextInputComponent,
                    ButtonDropdownComponent,
                    ButtonSplitDropdownComponent,
                    DropdownItemComponent,
                    ButtonGroupActionComponent,
                    ButtonGroupComponent,
                    CheckBoxGroup,
                    DateTimeComponent,
                    DropDownComponent,
                    EmailInputComponent,
                    NumberInputComponent,
                    PasswordInputComponent,
                    ProgressComponent,
                    RadioGroupComponent,
                    RatingInputComponent,
                    TextAreaComponent,
                    TypeAheadComponent,
                    TabPaneComponent,
                    TabComponent,
                    VerticalLeftTabPaneComponent,
                    VerticalRightTabPaneComponent,
                    DataTableComponent,
                    ColumnComponent,
                    FilterComponent,
                    CarouselComponent,
                    ItemSelectorComponent,
                    NavbarComponent,
                    NavbarSubMenuComponent,
                    SideNavBarComponent,
                    FilterTreeViewComponent,
                    TreeViewComponent,
                    TreeDataTableComponent,
                    PaneActionComponent,
                    PaneBodyComponent,
                    PaneHeaderComponent,
                    WindowPaneComponent,
                    DialogComponent,
                    CardComponent
                ],
                exports: [
                    ButtonComponent,
                    TextInputComponent,
                    ButtonDropdownComponent,
                    ButtonSplitDropdownComponent,
                    DropdownItemComponent,
                    ButtonGroupActionComponent,
                    ButtonGroupComponent,
                    CheckBoxGroup,
                    DateTimeComponent,
                    DropDownComponent,
                    EmailInputComponent,
                    NumberInputComponent,
                    PasswordInputComponent,
                    ProgressComponent,
                    RadioGroupComponent,
                    RatingInputComponent,
                    TextAreaComponent,
                    TypeAheadComponent,
                    TabPaneComponent,
                    TabComponent,
                    VerticalLeftTabPaneComponent,
                    VerticalRightTabPaneComponent,
                    DataTableComponent,
                    ColumnComponent,
                    FilterComponent,
                    CarouselComponent,
                    ItemSelectorComponent,
                    NavbarComponent,
                    NavbarSubMenuComponent,
                    SideNavBarComponent,
                    FilterTreeViewComponent,
                    TreeViewComponent,
                    TreeDataTableComponent,
                    PaneActionComponent,
                    PaneBodyComponent,
                    PaneHeaderComponent,
                    WindowPaneComponent,
                    DialogComponent,
                    CardComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
AmexioWidgetModule.ctorParameters = function () { return []; };

export { AmexioWidgetModule, ButtonComponent, CommonHttpService, CUSTOM_TEXT_INPUT_CONTROL_VALUE_ACCESSOR, BASE_IMPL_TEXT_INPUT, TextInputComponent, FormInputBase, CHECK_COLUMN_SIZE, CheckBoxGroup, DateTimeComponent, CUSTOM_DROPDOWN_CONTROL_VALUE_ACCESSOR, BASE_IMPL_DROPDOWN_INPUT, DropDownComponent, CUSTOM_EMAIL_INPUT_CONTROL_VALUE_ACCESSOR, BASE_IMPL_EMAIL_INPUT, EmailInputComponent, CUSTOM_NUMBER_INPUT_CONTROL_VALUE_ACCESSOR, BASE_IMPL_NUMBER_INPUT, NumberInputComponent, CUSTOM_PASSWORD_INPUT_CONTROL_VALUE_ACCESSOR, BASE_IMPL_PASSWORD_INPUT, PasswordInputComponent, ProgressComponent, COLUMN_SIZE, RadioGroupComponent, RatingInputComponent, CUSTOM_TEXT_AREA_INPUT_CONTROL_VALUE_ACCESSOR, BASE_IMPL_TEXTAREA_INPUT, TextAreaComponent, CUSTOM_AUTO_COMPLETE_CONTROL_VALUE_ACCESSOR, BASE_IMPL_AUTO_COMPLETE, TypeAheadComponent, ButtonGroupActionComponent, ButtonGroupComponent, DropdownItemComponent, ButtonDropdownComponent, ButtonSplitDropdownComponent, TabComponent, TabPaneComponent, VerticalLeftTabPaneComponent, VerticalRightTabPaneComponent, FilterComponent, CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR, DataTableComponent, ColumnComponent, CarouselComponent, ItemSelectorComponent, SideNavBarComponent, NavbarSubMenuComponent, NavbarComponent, FilterTreeViewComponent, TreeViewComponent, TreeDataTableComponent, PaneActionComponent, PaneBodyComponent, PaneHeaderComponent, WindowPaneComponent, DialogComponent, CardComponent };
